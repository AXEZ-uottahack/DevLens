(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_@joint_core_src_mvc_17f5e1._.js", {

"[project]/node_modules/@joint/core/src/mvc/mvcUtils.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "addMethodsUtil": (()=>addMethodsUtil),
    "extend": (()=>extend)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/util/utilHelpers.mjs [app-client] (ecmascript)");
;
;
var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;
    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent constructor.
    if (protoProps && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["has"])(protoProps, 'constructor')) {
        child = protoProps.constructor;
    } else {
        child = function() {
            return parent.apply(this, arguments);
        };
    }
    // Add static properties to the constructor function, if supplied.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])(child, parent, staticProps);
    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function and add the prototype properties.
    child.prototype = Object.assign(Object.create(parent.prototype), protoProps);
    child.prototype.constructor = child;
    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;
    return child;
};
// Proxy class methods to functions, wrapping the model's
// `attributes` object or collection's `models` array behind the scenes.
//
// `Function#apply` can be slow so we use the method's arg count, if we know it.
var addMethod = function(base, length, method, attribute) {
    switch(length){
        case 1:
            return function() {
                return base[method](this[attribute]);
            };
        case 2:
            return function(value) {
                return base[method](this[attribute], value);
            };
        case 3:
            return function(iteratee, context) {
                return base[method](this[attribute], cb(iteratee, this), context);
            };
        case 4:
            return function(iteratee, defaultVal, context) {
                return base[method](this[attribute], cb(iteratee, this), defaultVal, context);
            };
        default:
            return function() {
                var args = Array.prototype.slice.call(arguments);
                args.unshift(this[attribute]);
                return base[method].apply(base, args);
            };
    }
};
var addMethodsUtil = function(Class, base, methods, attribute) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["forIn"])(methods, function(length, method) {
        if (base[method]) Class.prototype[method] = addMethod(base, length, method, attribute);
    });
};
// Support `collection.sortBy('attr')`.
var cb = function(iteratee, instance) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(iteratee)) return iteratee;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isObject"])(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(iteratee)) return function(model) {
        return model.get(iteratee);
    };
    return iteratee;
};
var modelMatcher = function(attrs) {
    var matcher = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["matches"])(attrs);
    return function(model) {
        return matcher(model.attributes);
    };
};
}}),
"[project]/node_modules/@joint/core/src/mvc/Events.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Events": (()=>Events)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/util/utilHelpers.mjs [app-client] (ecmascript)");
;
var Events = {};
// Regular expression used to split event strings.
var eventSplitter = /\s+/;
// A private global variable to share between listeners and listenees.
var _listening;
// Iterates over the standard `event, callback` (as well as the fancy multiple
// space-separated events `"change blur", callback` and jQuery-style event
// maps `{event: callback}`).
var eventsApi = function(iteratee, events, name, callback, opts) {
    var i = 0, names;
    if (name && typeof name === 'object') {
        // Handle event maps.
        if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;
        for(names = Object.keys(name); i < names.length; i++){
            events = eventsApi(iteratee, events, names[i], name[names[i]], opts);
        }
    } else if (name && eventSplitter.test(name)) {
        // Handle space-separated event names by delegating them individually.
        for(names = name.split(eventSplitter); i < names.length; i++){
            events = iteratee(events, names[i], callback, opts);
        }
    } else {
        // Finally, standard events.
        events = iteratee(events, name, callback, opts);
    }
    return events;
};
// Bind an event to a `callback` function. Passing `"all"` will bind
// the callback to all events fired.
Events.on = function(name, callback, context) {
    this._events = eventsApi(onApi, this._events || {}, name, callback, {
        context: context,
        ctx: this,
        listening: _listening
    });
    if (_listening) {
        var listeners = this._listeners || (this._listeners = {});
        listeners[_listening.id] = _listening;
        // Allow the listening to use a counter, instead of tracking
        // callbacks for library interop
        _listening.interop = false;
    }
    return this;
};
// Inversion-of-control versions of `on`. Tell *this* object to listen to
// an event in another object... keeping track of what it's listening to
// for easier unbinding later.
Events.listenTo = function(obj, name, callback) {
    if (!obj) return this;
    var id = obj._listenId || (obj._listenId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["uniqueId"])('l'));
    var listeningTo = this._listeningTo || (this._listeningTo = {});
    var listening = _listening = listeningTo[id];
    // This object is not listening to any other events on `obj` yet.
    // Setup the necessary references to track the listening callbacks.
    if (!listening) {
        this._listenId || (this._listenId = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["uniqueId"])('l'));
        listening = _listening = listeningTo[id] = new Listening(this, obj);
    }
    // Bind callbacks on obj.
    var error = tryCatchOn(obj, name, callback, this);
    _listening = void 0;
    if (error) throw error;
    // If the target obj is not Events, track events manually.
    if (listening.interop) listening.on(name, callback);
    return this;
};
// The reducing API that adds a callback to the `events` object.
var onApi = function(events, name, callback, options) {
    if (callback) {
        var handlers = events[name] || (events[name] = []);
        var context = options.context, ctx = options.ctx, listening = options.listening;
        if (listening) listening.count++;
        handlers.push({
            callback: callback,
            context: context,
            ctx: context || ctx,
            listening: listening
        });
    }
    return events;
};
// An try-catch guarded #on function, to prevent poisoning the global
// `_listening` variable.
var tryCatchOn = function(obj, name, callback, context) {
    try {
        obj.on(name, callback, context);
    } catch (e) {
        return e;
    }
};
// Remove one or many callbacks. If `context` is null, removes all
// callbacks with that function. If `callback` is null, removes all
// callbacks for the event. If `name` is null, removes all bound
// callbacks for all events.
Events.off = function(name, callback, context) {
    if (!this._events) return this;
    this._events = eventsApi(offApi, this._events, name, callback, {
        context: context,
        listeners: this._listeners
    });
    return this;
};
// Tell this object to stop listening to either specific events ... or
// to every object it's currently listening to.
Events.stopListening = function(obj, name, callback) {
    var listeningTo = this._listeningTo;
    if (!listeningTo) return this;
    var ids = obj ? [
        obj._listenId
    ] : Object.keys(listeningTo);
    for(var i = 0; i < ids.length; i++){
        var listening = listeningTo[ids[i]];
        // If listening doesn't exist, this object is not currently
        // listening to obj. Break out early.
        if (!listening) break;
        listening.obj.off(name, callback, this);
        if (listening.interop) listening.off(name, callback);
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEmpty"])(listeningTo)) this._listeningTo = void 0;
    return this;
};
// The reducing API that removes a callback from the `events` object.
var offApi = function(events, name, callback, options) {
    if (!events) return;
    var context = options.context, listeners = options.listeners;
    var i = 0, names;
    // Delete all event listeners and "drop" events.
    if (!name && !context && !callback) {
        if (listeners != null) {
            for(names = Object.keys(listeners); i < names.length; i++){
                listeners[names[i]].cleanup();
            }
        }
        return;
    }
    names = name ? [
        name
    ] : Object.keys(events);
    for(; i < names.length; i++){
        name = names[i];
        var handlers = events[name];
        // Bail out if there are no events stored.
        if (!handlers) break;
        // Find any remaining events.
        var remaining = [];
        for(var j = 0; j < handlers.length; j++){
            var handler = handlers[j];
            if (callback && callback !== handler.callback && callback !== handler.callback._callback || context && context !== handler.context) {
                remaining.push(handler);
            } else {
                var listening = handler.listening;
                if (listening) listening.off(name, callback);
            }
        }
        // Replace events if there are any remaining.  Otherwise, clean up.
        if (remaining.length) {
            events[name] = remaining;
        } else {
            delete events[name];
        }
    }
    return events;
};
// Bind an event to only be triggered a single time. After the first time
// the callback is invoked, its listener will be removed. If multiple events
// are passed in using the space-separated syntax, the handler will fire
// once for each event, not once for a combination of all events.
Events.once = function(name, callback, context) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, this.off.bind(this));
    if (typeof name === 'string' && context == null) callback = void 0;
    return this.on(events, callback, context);
};
// Inversion-of-control versions of `once`.
Events.listenToOnce = function(obj, name, callback) {
    // Map the event into a `{event: once}` object.
    var events = eventsApi(onceMap, {}, name, callback, this.stopListening.bind(this, obj));
    return this.listenTo(obj, events);
};
// Reduces the event callbacks into a map of `{event: onceWrapper}`.
// `offer` unbinds the `onceWrapper` after it has been called.
var onceMap = function(map, name, callback, offer) {
    if (callback) {
        var once = map[name] = onceInvoke(function() {
            offer(name, once);
            callback.apply(this, arguments);
        });
        once._callback = callback;
    }
    return map;
};
// Creates a function that is restricted to invoking 'func' once.
// Repeat calls to the function return the value of the first invocation.
var onceInvoke = function(func) {
    var result;
    if (typeof func != 'function') {
        throw new TypeError('Expected a function');
    }
    var n = 2;
    return function() {
        if (--n > 0) {
            result = func.apply(this, arguments);
        }
        if (n <= 1) {
            func = undefined;
        }
        return result;
    };
};
// Trigger one or many events, firing all bound callbacks. Callbacks are
// passed the same arguments as `trigger` is, apart from the event name
// (unless you're listening on `"all"`, which will cause your callback to
// receive the true name of the event as the first argument).
Events.trigger = function(name) {
    if (!this._events) return this;
    var length = Math.max(0, arguments.length - 1);
    var args = Array(length);
    for(var i = 0; i < length; i++)args[i] = arguments[i + 1];
    eventsApi(triggerApi, this._events, name, void 0, args);
    return this;
};
// Handles triggering the appropriate event callbacks.
var triggerApi = function(objEvents, name, callback, args) {
    if (objEvents) {
        var events = objEvents[name];
        var allEvents = objEvents.all;
        if (events && allEvents) allEvents = allEvents.slice();
        if (events) triggerEvents(events, args);
        if (allEvents) triggerEvents(allEvents, [
            name
        ].concat(args));
    }
    return objEvents;
};
// A difficult-to-believe, but optimized internal dispatch function for
// triggering events. Tries to keep the usual cases speedy (most internal
// events have 3 arguments).
var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch(args.length){
        case 0:
            while(++i < l)(ev = events[i]).callback.call(ev.ctx);
            return;
        case 1:
            while(++i < l)(ev = events[i]).callback.call(ev.ctx, a1);
            return;
        case 2:
            while(++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2);
            return;
        case 3:
            while(++i < l)(ev = events[i]).callback.call(ev.ctx, a1, a2, a3);
            return;
        default:
            while(++i < l)(ev = events[i]).callback.apply(ev.ctx, args);
            return;
    }
};
// A listening class that tracks and cleans up memory bindings
// when all callbacks have been offed.
var Listening = function(listener, obj) {
    this.id = listener._listenId;
    this.listener = listener;
    this.obj = obj;
    this.interop = true;
    this.count = 0;
    this._events = void 0;
};
Listening.prototype.on = Events.on;
// Offs a callback (or several).
// Uses an optimized counter if the listenee uses Events.
// Otherwise, falls back to manual tracking to support events
// library interop.
Listening.prototype.off = function(name, callback) {
    var cleanup;
    if (this.interop) {
        this._events = eventsApi(offApi, this._events, name, callback, {
            context: void 0,
            listeners: void 0
        });
        cleanup = !this._events;
    } else {
        this.count--;
        cleanup = this.count === 0;
    }
    if (cleanup) this.cleanup();
};
// Cleans up memory bindings between the listener and the listenee.
Listening.prototype.cleanup = function() {
    delete this.listener._listeningTo[this.obj._listenId];
    if (!this.interop) delete this.obj._listeners[this.id];
};
// Aliases for backwards compatibility.
Events.bind = Events.on;
Events.unbind = Events.off;
}}),
"[project]/node_modules/@joint/core/src/mvc/Model.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Model": (()=>Model)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/util/utilHelpers.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Events.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$mvcUtils$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/mvcUtils.mjs [app-client] (ecmascript)");
;
;
;
var Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.preinitialize.apply(this, arguments);
    this.cid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["uniqueId"])(this.cidPrefix);
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    var attributeDefaults = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["result"])(this, 'defaults');
    // Just _.defaults would work fine, but the additional _.extends
    // is in there for historical reasons. See #3843.
    attrs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["defaults"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({}, attributeDefaults, attrs), attributeDefaults);
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
};
// Attach all inheritable methods to the Model prototype.
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])(Model.prototype, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Events"], {
    // A hash of attributes whose current and previous value differ.
    changed: null,
    // The value returned during the last failed validation.
    validationError: null,
    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',
    // The prefix is used to create the client id which is used to identify models locally.
    // You may want to override this if you're experiencing name clashes with model ids.
    cidPrefix: 'c',
    // preinitialize is an empty function by default. You can override it with a function
    // or object.  preinitialize will run before any instantiation logic is run in the Model.
    preinitialize: function() {
    // No implementation.
    },
    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function() {
    // No implementation.
    },
    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(this.attributes);
    },
    // Get the value of an attribute.
    get: function(attr) {
        return this.attributes[attr];
    },
    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
        return this.get(attr) != null;
    },
    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
        if (key == null) return this;
        // Handle both `"key", value` and `{key: value}` -style arguments.
        var attrs;
        if (typeof key === 'object') {
            attrs = key;
            options = val;
        } else {
            (attrs = {})[key] = val;
        }
        options || (options = {});
        // Run validation.
        if (!this._validate(attrs, options)) return false;
        // Extract attributes and options.
        var unset = options.unset;
        var silent = options.silent;
        var changes = [];
        var changing = this._changing;
        this._changing = true;
        if (!changing) {
            this._previousAttributes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(this.attributes);
            this.changed = {};
        }
        var current = this.attributes;
        var changed = this.changed;
        var prev = this._previousAttributes;
        // For each `set` attribute, update or delete the current value.
        for(var attr in attrs){
            val = attrs[attr];
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"])(current[attr], val)) changes.push(attr);
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"])(prev[attr], val)) {
                changed[attr] = val;
            } else {
                delete changed[attr];
            }
            unset ? delete current[attr] : current[attr] = val;
        }
        // Update the `id`.
        if (this.idAttribute in attrs) {
            var prevId = this.id;
            this.id = this.get(this.idAttribute);
            this.trigger('changeId', this, prevId, options);
        }
        // Trigger all relevant attribute changes.
        if (!silent) {
            if (changes.length) this._pending = options;
            for(var i = 0; i < changes.length; i++){
                this.trigger('change:' + changes[i], this, current[changes[i]], options);
            }
        }
        // You might be wondering why there's a `while` loop here. Changes can
        // be recursively nested within `"change"` events.
        if (changing) return this;
        if (!silent) {
            while(this._pending){
                options = this._pending;
                this._pending = false;
                this.trigger('change', this, options);
            }
        }
        this._pending = false;
        this._changing = false;
        return this;
    },
    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
        return this.set(attr, void 0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({}, options, {
            unset: true
        }));
    },
    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
        var attrs = {};
        for(var key in this.attributes)attrs[key] = void 0;
        return this.set(attrs, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({}, options, {
            unset: true
        }));
    },
    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
        if (attr == null) return !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEmpty"])(this.changed);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["has"])(this.changed, attr);
    },
    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
        if (!diff) return this.hasChanged() ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(this.changed) : false;
        var old = this._changing ? this._previousAttributes : this.attributes;
        var changed = {};
        var hasChanged;
        for(var attr in diff){
            var val = diff[attr];
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEqual"])(old[attr], val)) continue;
            changed[attr] = val;
            hasChanged = true;
        }
        return hasChanged ? changed : false;
    },
    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
        if (attr == null || !this._previousAttributes) return null;
        return this._previousAttributes[attr];
    },
    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(this._previousAttributes);
    },
    // Create a new model with identical attributes to this one.
    clone: function() {
        return new this.constructor(this.attributes);
    },
    // Check if the model is currently in a valid state.
    isValid: function(options) {
        return this._validate({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({}, options, {
            validate: true
        }));
    },
    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
        if (!options.validate || !this.validate) return true;
        attrs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({}, this.attributes, attrs);
        var error = this.validationError = this.validate(attrs, options) || null;
        if (!error) return true;
        this.trigger('invalid', this, error, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])(options, {
            validationError: error
        }));
        return false;
    }
});
// Set up inheritance for the model.
Model.extend = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$mvcUtils$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extend"];
}}),
"[project]/node_modules/@joint/core/src/mvc/Collection.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Collection": (()=>Collection)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$mvcUtils$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/mvcUtils.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/util/utilHelpers.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Events.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Model$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Model.mjs [app-client] (ecmascript)");
;
;
;
;
var Collection = function(models, options) {
    options || (options = {});
    this.preinitialize.apply(this, arguments);
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({
        silent: true
    }, options));
};
// Default options for `Collection#set`.
var setOptions = {
    add: true,
    remove: true,
    merge: true
};
var addOptions = {
    add: true,
    remove: false
};
// Splices `insert` into `array` at index `at`.
var splice = function(array, insert, at) {
    at = Math.min(Math.max(at, 0), array.length);
    var tail = Array(array.length - at);
    var length = insert.length;
    var i;
    for(i = 0; i < tail.length; i++)tail[i] = array[i + at];
    for(i = 0; i < length; i++)array[i + at] = insert[i];
    for(i = 0; i < tail.length; i++)array[i + length + at] = tail[i];
};
// Define the Collection's inheritable methods.
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])(Collection.prototype, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Events"], {
    // The default model for a collection is just a **Model**.
    // This should be overridden in most cases.
    model: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Model$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Model"],
    // preinitialize is an empty function by default. You can override it with a function
    // or object.  preinitialize will run before any instantiation logic is run in the Collection.
    preinitialize: function() {
    // No implementation.
    },
    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function() {
    // No implementation.
    },
    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
        return this.map(function(model) {
            return model.toJSON(options);
        });
    },
    // Add a model, or list of models to the set. `models` may be
    // Models or raw JavaScript objects to be converted to Models, or any
    // combination of the two.
    add: function(models, options) {
        return this.set(models, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({
            merge: false
        }, options, addOptions));
    },
    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
        options = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({}, options);
        var singular = !Array.isArray(models);
        models = singular ? [
            models
        ] : models.slice();
        var removed = this._removeModels(models, options);
        if (!options.silent && removed.length) {
            options.changes = {
                added: [],
                merged: [],
                removed: removed
            };
            this.trigger('update', this, options);
        }
        return singular ? removed[0] : removed;
    },
    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
        if (models == null) return;
        options = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({}, setOptions, options);
        var singular = !Array.isArray(models);
        models = singular ? [
            models
        ] : models.slice();
        var at = options.at;
        if (at != null) at = +at;
        if (at > this.length) at = this.length;
        if (at < 0) at += this.length + 1;
        var set = [];
        var toAdd = [];
        var toMerge = [];
        var toRemove = [];
        var modelMap = {};
        var add = options.add;
        var merge = options.merge;
        var remove = options.remove;
        var sort = false;
        var sortable = this.comparator && at == null && options.sort !== false;
        var sortAttr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(this.comparator) ? this.comparator : null;
        // Turn bare objects into model references, and prevent invalid models
        // from being added.
        var model, i;
        for(i = 0; i < models.length; i++){
            model = models[i];
            // If a duplicate is found, prevent it from being added and
            // optionally merge it into the existing model.
            var existing = this.get(model);
            if (existing) {
                if (merge && model !== existing) {
                    var attrs = this._isModel(model) ? model.attributes : model;
                    existing.set(attrs, options);
                    toMerge.push(existing);
                    if (sortable && !sort) sort = existing.hasChanged(sortAttr);
                }
                if (!modelMap[existing.cid]) {
                    modelMap[existing.cid] = true;
                    set.push(existing);
                }
                models[i] = existing;
            // If this is a new, valid model, push it to the `toAdd` list.
            } else if (add) {
                model = models[i] = this._prepareModel(model, options);
                if (model) {
                    toAdd.push(model);
                    this._addReference(model, options);
                    modelMap[model.cid] = true;
                    set.push(model);
                }
            }
        }
        // Remove stale models.
        if (remove) {
            for(i = 0; i < this.length; i++){
                model = this.models[i];
                if (!modelMap[model.cid]) toRemove.push(model);
            }
            if (toRemove.length) this._removeModels(toRemove, options);
        }
        // See if sorting is needed, update `length` and splice in new models.
        var orderChanged = false;
        var replace = !sortable && add && remove;
        if (set.length && replace) {
            orderChanged = this.length !== set.length || this.models.some(function(m, index) {
                return m !== set[index];
            });
            this.models.length = 0;
            splice(this.models, set, 0);
            this.length = this.models.length;
        } else if (toAdd.length) {
            if (sortable) sort = true;
            splice(this.models, toAdd, at == null ? this.length : at);
            this.length = this.models.length;
        }
        // Silently sort the collection if appropriate.
        if (sort) this.sort({
            silent: true
        });
        // Unless silenced, it's time to fire all appropriate add/sort/update events.
        if (!options.silent) {
            for(i = 0; i < toAdd.length; i++){
                if (at != null) options.index = at + i;
                model = toAdd[i];
                model.trigger('add', model, this, options);
            }
            if (sort || orderChanged) this.trigger('sort', this, options);
            if (toAdd.length || toRemove.length || toMerge.length) {
                options.changes = {
                    added: toAdd,
                    removed: toRemove,
                    merged: toMerge
                };
                this.trigger('update', this, options);
            }
        }
        // Return the added (or merged) model (or models).
        return singular ? models[0] : models;
    },
    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
        options = options ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(options) : {};
        for(var i = 0; i < this.models.length; i++){
            this._removeReference(this.models[i], options);
        }
        options.previousModels = this.models;
        this._reset();
        models = this.add(models, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({
            silent: true
        }, options));
        if (!options.silent) this.trigger('reset', this, options);
        return models;
    },
    // Add a model to the end of the collection.
    push: function(model, options) {
        return this.add(model, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({
            at: this.length
        }, options));
    },
    // Remove a model from the end of the collection.
    pop: function(options) {
        var model = this.at(this.length - 1);
        return this.remove(model, options);
    },
    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
        return this.add(model, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({
            at: 0
        }, options));
    },
    // Remove a model from the beginning of the collection.
    shift: function(options) {
        var model = this.at(0);
        return this.remove(model, options);
    },
    // Slice out a sub-array of models from the collection.
    slice: function() {
        return Array.prototype.slice.apply(this.models, arguments);
    },
    // Get a model from the set by id, cid, model object with id or cid
    // properties, or an attributes object that is transformed through modelId.
    get: function(obj) {
        if (obj == null) return void 0;
        return this._byId[obj] || this._byId[this.modelId(this._isModel(obj) ? obj.attributes : obj, obj.idAttribute)] || obj.cid && this._byId[obj.cid];
    },
    // Returns `true` if the model is in the collection.
    has: function(obj) {
        return this.get(obj) != null;
    },
    // Get the model at the given index.
    at: function(index) {
        if (index < 0) index += this.length;
        return this.models[index];
    },
    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
        var comparator = this.comparator;
        if (!comparator) throw new Error('Cannot sort a set without a comparator');
        options || (options = {});
        var length = comparator.length;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(comparator)) comparator = comparator.bind(this);
        // Run sort based on type of `comparator`.
        if (length === 1 || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isString"])(comparator)) {
            this.models = this.sortBy(comparator);
        } else {
            this.models.sort(comparator);
        }
        if (!options.silent) this.trigger('sort', this, options);
        return this;
    },
    // Create a new collection with an identical list of models as this one.
    clone: function() {
        return new this.constructor(this.models, {
            model: this.model,
            comparator: this.comparator
        });
    },
    // Define how to uniquely identify models in the collection.
    modelId: function(attrs, idAttribute) {
        return attrs[idAttribute || this.model.prototype.idAttribute || 'id'];
    },
    // Get an iterator of all models in this collection.
    values: function() {
        return new CollectionIterator(this, ITERATOR_VALUES);
    },
    // Get an iterator of all model IDs in this collection.
    keys: function() {
        return new CollectionIterator(this, ITERATOR_KEYS);
    },
    // Get an iterator of all [ID, model] tuples in this collection.
    entries: function() {
        return new CollectionIterator(this, ITERATOR_KEYSVALUES);
    },
    // Iterate over elements of the collection, and invoke fn for each element
    each: function(fn, context) {
        this.models.forEach(fn, context);
    },
    // Iterate over elements of collection, and return an array of all elements fn returns truthy for
    filter: function(fn, context) {
        return this.models.filter(fn, context);
    },
    find: function(fn, context) {
        return this.models.find(fn, context);
    },
    findIndex: function(fn, context) {
        return this.models.findIndex(fn, context);
    },
    // Return the first model of the collection
    first: function() {
        return this.models[0];
    },
    // Return true if value is in the collection
    includes: function(value) {
        return this.models.includes(value);
    },
    // Return the last model of the collection
    last: function() {
        return this.models[this.models.length - 1];
    },
    // Return true if collection has no elements
    isEmpty: function() {
        return !this.models.length;
    },
    // Create an array of values by running each element in the collection through fn
    map: function(fn, context) {
        return this.models.map(fn, context);
    },
    // Runs "reducer" fn over all elements in the collection, in ascending-index order, and accumulates them into a single value
    reduce: function(fn, initAcc = this.first()) {
        return this.models.reduce(fn, initAcc);
    },
    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
        this.length = 0;
        this.models = [];
        this._byId = {};
    },
    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
        if (this._isModel(attrs)) {
            if (!attrs.collection) attrs.collection = this;
            return attrs;
        }
        options = options ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["clone"])(options) : {};
        options.collection = this;
        var model;
        if (this.model.prototype) {
            model = new this.model(attrs, options);
        } else {
            // ES class methods didn't have prototype
            model = this.model(attrs, options);
        }
        if (!model.validationError) return model;
        this.trigger('invalid', this, model.validationError, options);
        return false;
    },
    // Internal method called by both remove and set.
    _removeModels: function(models, options) {
        var removed = [];
        for(var i = 0; i < models.length; i++){
            var model = this.get(models[i]);
            if (!model) continue;
            var index = this.models.indexOf(model);
            this.models.splice(index, 1);
            this.length--;
            // Remove references before triggering 'remove' event to prevent an
            // infinite loop. #3693
            delete this._byId[model.cid];
            var id = this.modelId(model.attributes, model.idAttribute);
            if (id != null) delete this._byId[id];
            if (!options.silent) {
                options.index = index;
                model.trigger('remove', model, this, options);
            }
            removed.push(model);
            this._removeReference(model, options);
        }
        if (models.length > 0 && !options.silent) delete options.index;
        return removed;
    },
    // Method for checking whether an object should be considered a model for
    // the purposes of adding to the collection.
    _isModel: function(model) {
        return model instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Model$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Model"];
    },
    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
        this._byId[model.cid] = model;
        var id = this.modelId(model.attributes, model.idAttribute);
        if (id != null) this._byId[id] = model;
        model.on('all', this._onModelEvent, this);
    },
    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
        delete this._byId[model.cid];
        var id = this.modelId(model.attributes, model.idAttribute);
        if (id != null) delete this._byId[id];
        if (this === model.collection) delete model.collection;
        model.off('all', this._onModelEvent, this);
    },
    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
        if (model) {
            if ((event === 'add' || event === 'remove') && collection !== this) return;
            if (event === 'changeId') {
                var prevId = this.modelId(model.previousAttributes(), model.idAttribute);
                var id = this.modelId(model.attributes, model.idAttribute);
                if (prevId != null) delete this._byId[prevId];
                if (id != null) this._byId[id] = model;
            }
        }
        this.trigger.apply(this, arguments);
    }
});
// Defining an @@iterator method implements JavaScript's Iterable protocol.
// In modern ES2015 browsers, this value is found at Symbol.iterator.
var $$iterator = typeof Symbol === 'function' && Symbol.iterator;
if ($$iterator) {
    Collection.prototype[$$iterator] = Collection.prototype.values;
}
// CollectionIterator
// ------------------
// A CollectionIterator implements JavaScript's Iterator protocol, allowing the
// use of `for of` loops in modern browsers and interoperation between
// Collection and other JavaScript functions and third-party libraries
// which can operate on Iterables.
var CollectionIterator = function(collection, kind) {
    this._collection = collection;
    this._kind = kind;
    this._index = 0;
};
// This "enum" defines the three possible kinds of values which can be emitted
// by a CollectionIterator that correspond to the values(), keys() and entries()
// methods on Collection, respectively.
var ITERATOR_VALUES = 1;
var ITERATOR_KEYS = 2;
var ITERATOR_KEYSVALUES = 3;
// All Iterators should themselves be Iterable.
if ($$iterator) {
    CollectionIterator.prototype[$$iterator] = function() {
        return this;
    };
}
CollectionIterator.prototype.next = function() {
    if (this._collection) {
        // Only continue iterating if the iterated collection is long enough.
        if (this._index < this._collection.length) {
            var model = this._collection.at(this._index);
            this._index++;
            // Construct a value depending on what kind of values should be iterated.
            var value;
            if (this._kind === ITERATOR_VALUES) {
                value = model;
            } else {
                var id = this._collection.modelId(model.attributes, model.idAttribute);
                if (this._kind === ITERATOR_KEYS) {
                    value = id;
                } else {
                    value = [
                        id,
                        model
                    ];
                }
            }
            return {
                value: value,
                done: false
            };
        }
        // Once exhausted, remove the reference to the collection so future
        // calls to the next method always return done.
        this._collection = void 0;
    }
    return {
        value: void 0,
        done: true
    };
};
//  Methods that we want to implement on the Collection.
var collectionMethods = {
    toArray: 1,
    sortBy: 3
};
// Mix in each method as a proxy to `Collection#models`.
var config = [
    Collection,
    collectionMethods,
    'models'
];
function addMethods(config) {
    var Base = config[0], methods = config[1], attribute = config[2];
    const methodsToAdd = {
        sortBy: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sortBy"],
        toArray: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["toArray"]
    };
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$mvcUtils$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addMethodsUtil"])(Base, methodsToAdd, methods, attribute);
}
addMethods(config);
// Set up inheritance for the collection.
Collection.extend = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$mvcUtils$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extend"];
}}),
"[project]/node_modules/@joint/core/src/mvc/Dom/Event.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Event": (()=>Event)
});
const Event = function(src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof Event)) {
        return new Event(src, props);
    }
    // Event object
    if (src && src.type) {
        this.originalEvent = src;
        this.type = src.type;
        // Events bubbling up the document may have been marked as prevented
        // by a handler lower down the tree; reflect the correct value.
        this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
        // Create target properties
        this.target = src.target;
        this.currentTarget = src.currentTarget;
        this.relatedTarget = src.relatedTarget;
    // Event type
    } else {
        this.type = src;
    }
    // Put explicitly provided properties onto the event object
    if (props) {
        Object.assign(this, props);
    }
    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || Date.now();
    // Mark it as fixed
    this.envelope = true;
};
// $.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
Event.prototype = {
    constructor: Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    preventDefault: function() {
        const evt = this.originalEvent;
        this.isDefaultPrevented = returnTrue;
        if (evt) {
            evt.preventDefault();
        }
    },
    stopPropagation: function() {
        const evt = this.originalEvent;
        this.isPropagationStopped = returnTrue;
        if (evt) {
            evt.stopPropagation();
        }
    },
    stopImmediatePropagation: function() {
        const evt = this.originalEvent;
        this.isImmediatePropagationStopped = returnTrue;
        if (evt) {
            evt.stopImmediatePropagation();
        }
        this.stopPropagation();
    }
};
// Includes all common event props including KeyEvent and MouseEvent specific props
[
    'altKey',
    'bubbles',
    'cancelable',
    'changedTouches',
    'ctrlKey',
    'detail',
    'eventPhase',
    'metaKey',
    'pageX',
    'pageY',
    'shiftKey',
    'view',
    'char',
    'code',
    'charCode',
    'key',
    'keyCode',
    'button',
    'buttons',
    'clientX',
    'clientY',
    'offsetX',
    'offsetY',
    'pointerId',
    'pointerType',
    'screenX',
    'screenY',
    'targetTouches',
    'toElement',
    'touches',
    'which'
].forEach((name)=>addProp(name));
function addProp(name) {
    Object.defineProperty(Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: function() {
            return this.originalEvent ? this.originalEvent[name] : undefined;
        },
        set: function(value) {
            Object.defineProperty(this, name, {
                enumerable: true,
                configurable: true,
                writable: true,
                value: value
            });
        }
    });
}
function returnTrue() {
    return true;
}
function returnFalse() {
    return false;
}
}}),
"[project]/node_modules/@joint/core/src/mvc/Data.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
class Data {
    constructor(){
        this.map = new WeakMap();
    }
    has(obj, key) {
        if (key === undefined) return this.map.has(obj);
        return key in this.map.get(obj);
    }
    create(obj) {
        if (!this.has(obj)) this.map.set(obj, Object.create(null));
        return this.get(obj);
    }
    get(obj, key) {
        if (!this.has(obj)) return undefined;
        const data = this.map.get(obj);
        if (key === undefined) return data;
        return data[key];
    }
    set(obj, key, value) {
        if (key === undefined) return;
        const data = this.create(obj);
        if (typeof key === 'string') {
            data[key] = value;
        } else {
            Object.assign(data, key);
        }
    }
    remove(obj, key) {
        if (!this.has(obj)) return;
        if (key === undefined) {
            this.map.delete(obj);
        } else {
            const data = this.map.get(obj);
            delete data[key];
        }
    }
}
const __TURBOPACK__default__export__ = Data;
}}),
"[project]/node_modules/@joint/core/src/mvc/Dom/vars.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "dataPriv": (()=>dataPriv),
    "dataUser": (()=>dataUser)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Data$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Data.mjs [app-client] (ecmascript)");
;
const dataPriv = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Data$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
const dataUser = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Data$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
}}),
"[project]/node_modules/@joint/core/src/mvc/Dom/Dom.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*!
 * jQuery JavaScript Library v4.0.0-pre+c98597ea.dirty
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2023-11-24T14:04Z
 */ __turbopack_esm__({
    "default": (()=>$)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Event$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/Event.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/vars.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/util/utilHelpers.mjs [app-client] (ecmascript)");
;
;
;
const document = typeof window !== 'undefined' ? window.document : null;
const documentElement = document && document.documentElement;
const rTypeNamespace = /^([^.]*)(?:\.(.+)|)/;
// Only count HTML whitespace
// Other whitespace should count in values
// https://infra.spec.whatwg.org/#ascii-whitespace
const rNotHtmlWhite = /[^\x20\t\r\n\f]+/g;
// Define a local copy of $
const $ = function(selector) {
    // The $ object is actually just the init constructor 'enhanced'
    // Need init if $ is called (just allow error to be thrown if not included)
    return new $.Dom(selector);
};
$.fn = $.prototype = {
    constructor: $,
    // The default length of a $ object is 0
    length: 0
};
// A global GUID counter for objects
$.guid = 1;
// User data storage
$.data = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataUser"];
$.merge = function(first, second) {
    let len = +second.length;
    let i = first.length;
    for(let j = 0; j < len; j++){
        first[i++] = second[j];
    }
    first.length = i;
    return first;
};
$.parseHTML = function(string) {
    // Inline events will not execute when the HTML is parsed; this includes, for example, sending GET requests for images.
    const context = document.implementation.createHTMLDocument();
    // Set the base href for the created document so any parsed elements with URLs
    // are based on the document's URL
    const base = context.createElement('base');
    base.href = document.location.href;
    context.head.appendChild(base);
    context.body.innerHTML = string;
    // remove scripts
    const scripts = context.getElementsByTagName('script');
    for(let i = 0; i < scripts.length; i++){
        scripts[i].remove();
    }
    return Array.from(context.body.childNodes);
};
if (typeof Symbol === 'function') {
    $.fn[Symbol.iterator] = Array.prototype[Symbol.iterator];
}
$.fn.toArray = function() {
    return Array.from(this);
};
// Take an array of elements and push it onto the stack
// (returning the new matched element set)
$.fn.pushStack = function(elements) {
    // Build a new $ matched element set
    const ret = $.merge(this.constructor(), elements);
    // Add the old object onto the stack (as a reference)
    ret.prevObject = this;
    // Return the newly-formed element set
    return ret;
};
$.fn.find = function(selector) {
    const [el] = this;
    const ret = this.pushStack([]);
    if (!el) return ret;
    // Early return if context is not an element, document or document fragment
    const { nodeType } = el;
    if (nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return ret;
    }
    if (typeof selector !== 'string') {
        if (el !== selector && el.contains(selector)) {
            $.merge(ret, [
                selector
            ]);
        }
    } else {
        $.merge(ret, el.querySelectorAll(selector));
    }
    return ret;
};
$.fn.add = function(selector) {
    const newElements = $(selector).toArray();
    const prevElements = this.toArray();
    const ret = this.pushStack([]);
    $.merge(ret, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["uniq"])(prevElements.concat(newElements)));
    return ret;
};
$.fn.addBack = function() {
    return this.add(this.prevObject);
};
$.fn.filter = function(selector) {
    const matches = [];
    for(let i = 0; i < this.length; i++){
        const node = this[i];
        if (!node.matches(selector)) continue;
        matches.push(node);
    }
    return this.pushStack(matches);
};
// A simple way to check for HTML strings
// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)
// Strict HTML recognition (trac-11290: must start with <)
// Shortcut simple #id case for speed
const rQuickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
function isObviousHtml(input) {
    return input[0] === '<' && input[input.length - 1] === '>' && input.length >= 3;
}
const Dom = function(selector) {
    if (!selector) {
        // HANDLE: $(""), $(null), $(undefined), $(false)
        return this;
    }
    if (typeof selector === 'function') {
        // HANDLE: $(function)
        // Shortcut for document ready
        throw new Error('function not supported');
    }
    if (arguments.length > 1) {
        throw new Error('selector with context not supported');
    }
    if (selector.nodeType) {
        // HANDLE: $(DOMElement)
        this[0] = selector;
        this.length = 1;
        return this;
    }
    let match;
    if (isObviousHtml(selector + '')) {
        // Handle obvious HTML strings
        // Assume that strings that start and end with <> are HTML and skip
        // the regex check. This also handles browser-supported HTML wrappers
        // like TrustedHTML.
        match = [
            null,
            selector,
            null
        ];
    } else if (typeof selector === 'string') {
        // Handle HTML strings or selectors
        match = rQuickExpr.exec(selector);
    } else {
        // Array-like
        return $.merge(this, selector);
    }
    if (!match || !match[1]) {
        // HANDLE: $(expr)
        return $root.find(selector);
    }
    // Match html or make sure no context is specified for #id
    // Note: match[1] may be a string or a TrustedHTML wrapper
    if (match[1]) {
        // HANDLE: $(html) -> $(array)
        $.merge(this, $.parseHTML(match[1]));
        return this;
    }
    // HANDLE: $(#id)
    const el = document.getElementById(match[2]);
    if (el) {
        // Inject the element directly into the $ object
        this[0] = el;
        this.length = 1;
    }
    return this;
};
$.Dom = Dom;
// Give the init function the $ prototype for later instantiation
Dom.prototype = $.fn;
// Events
$.Event = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Event$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Event"];
$.event = {
    special: Object.create(null)
};
$.event.has = function(elem, eventType) {
    const events = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].get(elem, 'events');
    if (!events) return false;
    if (!eventType) return true;
    return Array.isArray(events[eventType]) && events[eventType].length > 0;
};
$.event.on = function(elem, types, selector, data, fn, one) {
    // Types can be a map of types/handlers
    if (typeof types === 'object') {
        // ( types-Object, selector, data )
        if (typeof selector !== 'string') {
            // ( types-Object, data )
            data = data || selector;
            selector = undefined;
        }
        for(let type in types){
            $.event.on(elem, type, selector, data, types[type], one);
        }
        return elem;
    }
    if (data == null && fn == null) {
        // ( types, fn )
        fn = selector;
        data = selector = undefined;
    } else if (fn == null) {
        if (typeof selector === 'string') {
            // ( types, selector, fn )
            fn = data;
            data = undefined;
        } else {
            // ( types, data, fn )
            fn = data;
            data = selector;
            selector = undefined;
        }
    }
    if (!fn) {
        return elem;
    }
    if (one === 1) {
        const origFn = fn;
        fn = function(event) {
            // Can use an empty set, since event contains the info
            $().off(event);
            return origFn.apply(this, arguments);
        };
        // Use same guid so caller can remove using origFn
        fn.guid = origFn.guid || (origFn.guid = $.guid++);
    }
    for(let i = 0; i < elem.length; i++){
        $.event.add(elem[i], types, fn, data, selector);
    }
};
$.event.add = function(elem, types, handler, data, selector) {
    // Only attach events to objects for which we can store data
    if (typeof elem != 'object') {
        return;
    }
    const elemData = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].create(elem);
    // Caller can pass in an object of custom data in lieu of the handler
    let handleObjIn;
    if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
    }
    // Ensure that invalid selectors throw exceptions at attach time
    // Evaluate against documentElement in case elem is a non-element node (e.g., document)
    if (selector) {
        documentElement.matches(selector);
    }
    // Make sure that the handler has a unique ID, used to find/remove it later
    if (!handler.guid) {
        handler.guid = $.guid++;
    }
    // Init the element's event structure and main handler, if this is the first
    let events;
    if (!(events = elemData.events)) {
        events = elemData.events = Object.create(null);
    }
    let eventHandle;
    if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function(e) {
            // Discard the second event of a $.event.trigger() and
            // when an event is called after a page has unloaded
            return typeof $ !== 'undefined' ? $.event.dispatch.apply(elem, arguments) : undefined;
        };
    }
    // Handle multiple events separated by a space
    const typesArr = (types || '').match(rNotHtmlWhite) || [
        ''
    ];
    let i = typesArr.length;
    while(i--){
        const [, origType, ns = ''] = rTypeNamespace.exec(typesArr[i]);
        // There *must* be a type, no attaching namespace-only handlers
        if (!origType) {
            continue;
        }
        const namespaces = ns.split('.').sort();
        // If event changes its type, use the special event handlers for the changed type
        let special = $.event.special[origType];
        // If selector defined, determine special event api type, otherwise given type
        const type = special && (selector ? special.delegateType : special.bindType) || origType;
        // Update special based on newly reset type
        special = $.event.special[type];
        // handleObj is passed to all event handlers
        const handleObj = Object.assign({
            type: type,
            origType: origType,
            data: data,
            handler: handler,
            guid: handler.guid,
            selector: selector,
            namespace: namespaces.join('.')
        }, handleObjIn);
        let handlers;
        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
            handlers = events[type] = [];
            handlers.delegateCount = 0;
            // Only use addEventListener if the special events handler returns false
            if (!special || !special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                if (elem.addEventListener) {
                    elem.addEventListener(type, eventHandle);
                }
            }
        }
        if (special && special.add) {
            special.add.call(elem, handleObj);
            if (!handleObj.handler.guid) {
                handleObj.handler.guid = handler.guid;
            }
        }
        // Add to the element's handler list, delegates in front
        if (selector) {
            handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
            handlers.push(handleObj);
        }
    }
};
// Detach an event or set of events from an element
$.event.remove = function(elem, types, handler, selector, mappedTypes) {
    const elemData = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].get(elem);
    if (!elemData || !elemData.events) return;
    const events = elemData.events;
    // Once for each type.namespace in types; type may be omitted
    const typesArr = (types || '').match(rNotHtmlWhite) || [
        ''
    ];
    let i = typesArr.length;
    while(i--){
        const [, origType, ns = ''] = rTypeNamespace.exec(typesArr[i]);
        // Unbind all events (on this namespace, if provided) for the element
        if (!origType) {
            for(const type in events){
                $.event.remove(elem, type + typesArr[i], handler, selector, true);
            }
            continue;
        }
        const special = $.event.special[origType];
        const type = special && (selector ? special.delegateType : special.bindType) || origType;
        const handlers = events[type];
        if (!handlers || handlers.length === 0) continue;
        const namespaces = ns.split('.').sort();
        const rNamespace = ns ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
        // Remove matching events
        const origCount = handlers.length;
        let j = origCount;
        while(j--){
            const handleObj = handlers[j];
            if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!rNamespace || rNamespace.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                handlers.splice(j, 1);
                if (handleObj.selector) {
                    handlers.delegateCount--;
                }
                if (special && special.remove) {
                    special.remove.call(elem, handleObj);
                }
            }
        }
        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && handlers.length === 0) {
            if (!special || !special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                // This "if" is needed for plain objects
                if (elem.removeEventListener) {
                    elem.removeEventListener(type, elemData.handle);
                }
            }
            delete events[type];
        }
    }
    // Remove data if it's no longer used
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isEmpty"])(events)) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].remove(elem, 'handle');
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].remove(elem, 'events');
    }
};
$.event.dispatch = function(nativeEvent) {
    const elem = this;
    // Make a writable $.Event from the native event object
    const event = $.event.fix(nativeEvent);
    event.delegateTarget = elem;
    // Use the fix-ed $.Event rather than the (read-only) native event
    const args = Array.from(arguments);
    args[0] = event;
    const eventsData = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].get(elem, 'events');
    const handlers = eventsData && eventsData[event.type] || [];
    const special = $.event.special[event.type];
    // Call the preDispatch hook for the mapped type, and let it bail if desired
    if (special && special.preDispatch) {
        if (special.preDispatch.call(elem, event) === false) return;
    }
    // Determine handlers
    const handlerQueue = $.event.handlers.call(elem, event, handlers);
    // Run delegates first; they may want to stop propagation beneath us
    let i = 0;
    let matched;
    while((matched = handlerQueue[i++]) && !event.isPropagationStopped()){
        event.currentTarget = matched.elem;
        let j = 0;
        let handleObj;
        while((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()){
            event.handleObj = handleObj;
            event.data = handleObj.data;
            const origSpecial = $.event.special[handleObj.origType];
            let handler;
            if (origSpecial && origSpecial.handle) {
                handler = origSpecial.handle;
            } else {
                handler = handleObj.handler;
            }
            const ret = handler.apply(matched.elem, args);
            if (ret !== undefined) {
                if ((event.result = ret) === false) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            }
        }
    }
    // Call the postDispatch hook for the mapped type
    if (special && special.postDispatch) {
        special.postDispatch.call(elem, event);
    }
    return event.result;
};
$.event.handlers = function(event, handlers) {
    const delegateCount = handlers.delegateCount;
    const handlerQueue = [];
    // Find delegate handlers
    if (delegateCount && // Support: Firefox <=42 - 66+
    // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
    // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
    // Support: IE 11+
    // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
    !(event.type === 'click' && event.button >= 1)) {
        for(let cur = event.target; cur !== this; cur = cur.parentNode || this){
            // Don't check non-elements (trac-13208)
            // Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)
            if (cur.nodeType === 1 && !(event.type === 'click' && cur.disabled === true)) {
                const matchedHandlers = [];
                const matchedSelectors = {};
                for(let i = 0; i < delegateCount; i++){
                    const handleObj = handlers[i];
                    // Don't conflict with Object.prototype properties (trac-13203)
                    const sel = handleObj.selector + ' ';
                    if (matchedSelectors[sel] === undefined) {
                        matchedSelectors[sel] = cur.matches(sel);
                    }
                    if (matchedSelectors[sel]) {
                        matchedHandlers.push(handleObj);
                    }
                }
                if (matchedHandlers.length) {
                    handlerQueue.push({
                        elem: cur,
                        handlers: matchedHandlers
                    });
                }
            }
        }
    }
    // Add the remaining (directly-bound) handlers
    if (delegateCount < handlers.length) {
        handlerQueue.push({
            elem: this,
            handlers: handlers.slice(delegateCount)
        });
    }
    return handlerQueue;
};
$.event.fix = function(originalEvent) {
    return originalEvent.envelope ? originalEvent : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Event$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Event"](originalEvent);
};
// A central reference to the root $(document)
const $root = $(document);
;
}}),
"[project]/node_modules/@joint/core/src/mvc/Dom/methods.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "addClass": (()=>addClass),
    "append": (()=>append),
    "appendTo": (()=>appendTo),
    "children": (()=>children),
    "clone": (()=>clone),
    "closest": (()=>closest),
    "css": (()=>css),
    "data": (()=>data),
    "detach": (()=>detach),
    "empty": (()=>empty),
    "hasClass": (()=>hasClass),
    "height": (()=>height),
    "html": (()=>html),
    "off": (()=>off),
    "offset": (()=>offset),
    "on": (()=>on),
    "one": (()=>one),
    "position": (()=>position),
    "prepend": (()=>prepend),
    "prependTo": (()=>prependTo),
    "remove": (()=>remove),
    "removeClass": (()=>removeClass),
    "toggleClass": (()=>toggleClass),
    "width": (()=>width)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/Dom.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/vars.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/util/utilHelpers.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$V$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/V/index.mjs [app-client] (ecmascript)");
;
;
;
;
// Manipulation
function cleanNodesData(nodes) {
    let i = nodes.length;
    while(i--)cleanNodeData(nodes[i]);
}
function cleanNodeData(node) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].event.remove(node);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].remove(node);
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataUser"].remove(node);
}
function removeNodes(nodes) {
    for(let i = 0; i < nodes.length; i++){
        const node = nodes[i];
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
}
function remove() {
    for(let i = 0; i < this.length; i++){
        const node = this[i];
        cleanNodeData(node);
        cleanNodesData(node.getElementsByTagName('*'));
    }
    removeNodes(this);
    return this;
}
function detach() {
    removeNodes(this);
    return this;
}
function empty() {
    for(let i = 0; i < this.length; i++){
        const node = this[i];
        if (node.nodeType === 1) {
            cleanNodesData(node.getElementsByTagName('*'));
            // Remove any remaining nodes
            node.textContent = '';
        }
    }
    return this;
}
function clone() {
    const clones = [];
    for(let i = 0; i < this.length; i++){
        clones.push(this[i].cloneNode(true));
    }
    return this.pushStack(clones);
}
function html(html) {
    const [el] = this;
    if (!el) return null;
    if (arguments.length === 0) return el.innerHTML;
    if (html === undefined) return this; // do nothing
    cleanNodesData(el.getElementsByTagName('*'));
    if (typeof html === 'string' || typeof html === 'number') {
        el.innerHTML = html;
    } else {
        el.innerHTML = '';
        return this.append(html);
    }
    return this;
}
function append(...nodes) {
    const [parent] = this;
    if (!parent) return this;
    nodes.forEach((node)=>{
        if (!node) return;
        if (typeof node === 'string') {
            parent.append(...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].parseHTML(node));
        } else if (node.toString() === '[object Object]') {
            // $ object
            this.append(...Array.from(node));
        } else if (Array.isArray(node)) {
            this.append(...node);
        } else {
            // DOM node
            parent.appendChild(node);
        }
    });
    return this;
}
function prepend(...nodes) {
    const [parent] = this;
    if (!parent) return this;
    nodes.forEach((node)=>{
        if (!node) return;
        if (typeof node === 'string') {
            parent.prepend(...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].parseHTML(node));
        } else if (node.toString() === '[object Object]') {
            // $ object
            this.prepend(...Array.from(node));
        } else if (Array.isArray(node)) {
            this.prepend(...node);
        } else {
            // DOM node
            parent.insertBefore(node, parent.firstChild);
        }
    });
    return this;
}
function appendTo(parent) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(parent).append(this);
    return this;
}
function prependTo(parent) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(parent).prepend(this);
    return this;
}
// Styles and attributes
const requireUnits = {};
[
    'width',
    'height',
    'top',
    'bottom',
    'left',
    'right',
    'padding',
    'paddingTop',
    'paddingBottom',
    'paddingLeft',
    'paddingRight',
    'margin',
    'marginTop',
    'marginBottom',
    'marginLeft',
    'marginRight'
].forEach((cssProp)=>{
    requireUnits[cssProp] = true;
});
function setCSSProperty(el, name, value) {
    if (typeof value === 'number' && requireUnits[(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["camelCase"])(name)]) {
        value += 'px';
    }
    el.style[name] = value;
}
function css(name, value) {
    let styles;
    if (typeof name === 'string') {
        if (value === undefined) {
            const [el] = this;
            if (!el) return null;
            return el.style[name];
        } else {
            styles = {
                [name]: value
            };
        }
    } else if (!name) {
        throw new Error('no styles provided');
    } else {
        styles = name;
    }
    for(let style in styles){
        if (styles.hasOwnProperty(style)) {
            for(let i = 0; i < this.length; i++){
                setCSSProperty(this[i], style, styles[style]);
            }
        }
    }
    return this;
}
function data(name, value) {
    if (arguments.length < 2) {
        const [el] = this;
        if (!el) return null;
        if (name === undefined) {
            return el.dataset;
        }
        return el.dataset[name];
    }
    for(let i = 0; i < this.length; i++){
        this[i].dataset[name] = value;
    }
    return this;
}
// Classes
function setNodesClass(method, nodes, args) {
    for(let i = 0; i < nodes.length; i++){
        const node = nodes[i];
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$V$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype[method].apply({
            node
        }, args);
    }
}
function removeClass() {
    setNodesClass('removeClass', this, arguments);
    return this;
}
function addClass() {
    setNodesClass('addClass', this, arguments);
    return this;
}
function toggleClass() {
    setNodesClass('toggleClass', this, arguments);
    return this;
}
function hasClass() {
    const [node] = this;
    if (!node) return false;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$V$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].prototype.hasClass.apply({
        node
    }, arguments);
}
function children(selector) {
    const matches = [];
    for(let i = 0; i < this.length; i++){
        const node = this[i];
        let children = Array.from(node.children);
        if (typeof selector === 'string') {
            children = children.filter((child)=>child.matches(selector));
        }
        matches.push(...children);
    }
    return this.pushStack(matches);
}
function closest(selector) {
    const closest = [];
    for(let i = 0; i < this.length; i++){
        const el = this[i];
        if (typeof selector === 'string') {
            const closestEl = el.closest(selector);
            if (closestEl) {
                closest.push(closestEl);
            }
        } else {
            const [ancestorEl] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(selector);
            if (ancestorEl && ancestorEl.contains(el)) {
                closest.push(ancestorEl);
            }
        }
    }
    return this.pushStack(closest);
}
function on(types, selector, data, fn) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].event.on(this, types, selector, data, fn);
    return this;
}
function one(types, selector, data, fn) {
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].event.on(this, types, selector, data, fn, 1);
    return this;
}
function off(types, selector, fn) {
    if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched $.Event
        const handleObj = types.handleObj;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
    }
    if (typeof types === 'object') {
        // ( types-object [, selector] )
        for(let type in types){
            this.off(type, selector, types[type]);
        }
        return this;
    }
    if (selector === false || typeof selector === 'function') {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
    }
    for(let i = 0; i < this.length; i++){
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].event.remove(this[i], types, fn, selector);
    }
    return this;
}
function width() {
    const [el] = this;
    if (el === window) return el.document.documentElement.clientWidth;
    else if (!el) return undefined;
    const styles = window.getComputedStyle(el);
    const height = el.offsetWidth;
    const borderTopWidth = parseFloat(styles.borderTopWidth);
    const borderBottomWidth = parseFloat(styles.borderBottomWidth);
    const paddingTop = parseFloat(styles.paddingTop);
    const paddingBottom = parseFloat(styles.paddingBottom);
    return height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom;
}
function height() {
    const [el] = this;
    if (el === window) return el.document.documentElement.clientHeight;
    if (!el) return undefined;
    const styles = window.getComputedStyle(el);
    const width = el.offsetHeight;
    const borderLeftWidth = parseFloat(styles.borderLeftWidth);
    const borderRightWidth = parseFloat(styles.borderRightWidth);
    const paddingLeft = parseFloat(styles.paddingLeft);
    const paddingRight = parseFloat(styles.paddingRight);
    return width - borderLeftWidth - borderRightWidth - paddingLeft - paddingRight;
}
function position() {
    const [el] = this;
    if (!el) return;
    let $el = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(el);
    let offsetParent;
    let offset;
    let doc;
    let parentOffset = {
        top: 0,
        left: 0
    };
    // position:fixed elements are offset from the viewport, which itself always has zero offset
    if ($el.css('position') === 'fixed') {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = el.getBoundingClientRect();
    } else {
        offset = $el.offset();
        // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified
        doc = el.ownerDocument;
        offsetParent = el.offsetParent || doc.documentElement;
        const isStaticallyPositioned = (el)=>{
            const { position } = el.style;
            return !position || position === 'static';
        };
        while(offsetParent && offsetParent !== doc.documentElement && isStaticallyPositioned(offsetParent)){
            offsetParent = offsetParent.offsetParent || doc.documentElement;
        }
        if (offsetParent && offsetParent !== el && offsetParent.nodeType === 1 && !isStaticallyPositioned(offsetParent)) {
            // Incorporate borders into its offset, since they are outside its content origin
            const offsetParentStyles = window.getComputedStyle(offsetParent);
            const borderTopWidth = parseFloat(offsetParentStyles.borderTopWidth) || 0;
            const borderLeftWidth = parseFloat(offsetParentStyles.borderLeftWidth) || 0;
            parentOffset = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(offsetParent).offset();
            parentOffset.top += borderTopWidth;
            parentOffset.left += borderLeftWidth;
        }
    }
    const marginTop = parseFloat(window.getComputedStyle(el).marginTop) || 0;
    const marginLeft = parseFloat(window.getComputedStyle(el).marginLeft) || 0;
    // Subtract parent offsets and element margins
    return {
        top: offset.top - parentOffset.top - marginTop,
        left: offset.left - parentOffset.left - marginLeft
    };
}
function offset(coordinates) {
    const [el] = this;
    //  Getter
    if (coordinates === undefined) {
        if (!el) return null;
        if (!el.getClientRects().length) {
            return {
                top: 0,
                left: 0
            };
        }
        const rect = el.getBoundingClientRect();
        return {
            top: rect.top + window.scrollY,
            left: rect.left + window.scrollX
        };
    }
    // Setter
    if (!el) return this;
    const currentStyle = window.getComputedStyle(el);
    if (currentStyle.position === 'static') {
        this.css('position', 'relative');
    }
    const currentOffset = this.offset();
    const topDifference = coordinates.top - currentOffset.top;
    const leftDifference = coordinates.left - currentOffset.left;
    this.css({
        top: (parseFloat(currentStyle.top) || 0) + topDifference + 'px',
        left: (parseFloat(currentStyle.left) || 0) + leftDifference + 'px'
    });
    return this;
}
}}),
"[project]/node_modules/@joint/core/src/mvc/Dom/animations.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "animate": (()=>animate),
    "stop": (()=>stop)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/Dom.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/vars.mjs [app-client] (ecmascript)");
;
;
const animationKey = 'animationFrameId';
const cssReset = {};
cssReset['transition-property'] = cssReset['transition-duration'] = cssReset['transition-delay'] = cssReset['transition-timing-function'] = cssReset['animation-name'] = cssReset['animation-duration'] = cssReset['animation-delay'] = cssReset['animation-timing-function'] = '';
function animate(properties, opt = {}) {
    this.stop();
    for(let i = 0; i < this.length; i++){
        animateNode(this[i], properties, opt);
    }
    return this;
}
function animateNode(el, properties, opt = {}) {
    let { duration = 400, easing = 'ease-in-out', delay = 0, complete } = opt;
    const delayId = setTimeout(function() {
        const $el = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(el);
        let fired = false;
        let endEvent = 'transitionend';
        // Convert milliseconds to seconds for CSS
        duration = duration / 1000;
        delay = delay / 1000;
        // Set up CSS values for transition or keyframe animation
        const cssValues = {};
        if (typeof properties === 'string') {
            // Keyframe animation
            cssValues['animation-name'] = properties;
            cssValues['animation-duration'] = duration + 's';
            cssValues['animation-delay'] = delay + 's';
            cssValues['animation-timing-function'] = easing;
            endEvent = 'animationend';
        } else {
            // CSS transitions
            const transitionProperties = [];
            for(var key in properties){
                if (properties.hasOwnProperty(key)) {
                    cssValues[key] = properties[key];
                    transitionProperties.push(key);
                }
            }
            if (duration > 0) {
                cssValues['transition-property'] = transitionProperties.join(', ');
                cssValues['transition-duration'] = duration + 's';
                cssValues['transition-delay'] = delay + 's';
                cssValues['transition-timing-function'] = easing;
            }
        }
        const wrappedCallback = function(event) {
            if (event) {
                if (event.target !== event.currentTarget) return; // makes sure the event didn't bubble from "below"
                event.target.removeEventListener(endEvent, wrappedCallback);
            } else {
                el.removeEventListener(endEvent, wrappedCallback); // triggered by setTimeout
            }
            fired = true;
            $el.css(cssReset);
            complete && complete.call(el);
        };
        if (duration > 0) {
            el.addEventListener(endEvent, wrappedCallback);
            // transitionEnd is not always firing on older Android phones
            // so make sure it gets fired
            const callbackId = setTimeout(function() {
                if (fired) return;
                wrappedCallback(null);
            }, (duration + delay) * 1000 + 25);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].set(el, animationKey, {
                id: callbackId,
                stop: ()=>{
                    clearTimeout(callbackId);
                    el.removeEventListener(endEvent, wrappedCallback);
                }
            });
        }
        $el.css(cssValues);
        if (duration <= 0) {
            wrappedCallback(null);
        }
    });
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].set(el, animationKey, {
        stop: ()=>clearTimeout(delayId)
    });
}
function stop() {
    for(let i = 0; i < this.length; i++){
        const el = this[i];
        const animation = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].get(el, animationKey);
        if (!animation) continue;
        animation.stop();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$vars$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["dataPriv"].remove(el, animationKey);
    }
    this.css(cssReset);
    return this;
}
}}),
"[project]/node_modules/@joint/core/src/mvc/Dom/props.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
const propertySetters = {
    outerWidth: 'offsetWidth',
    outerHeight: 'offsetHeight',
    innerWidth: 'clientWidth',
    innerHeight: 'clientHeight',
    scrollLeft: 'scrollLeft',
    scrollTop: 'scrollTop',
    val: 'value',
    text: 'textContent'
};
const propertiesMap = {
    disabled: 'disabled',
    value: 'value',
    text: 'textContent'
};
function prop(name, value) {
    if (!name) throw new Error('no property provided');
    if (arguments.length === 1) {
        const [el] = this;
        if (!el) return null;
        return el[name];
    }
    if (value === undefined) return this;
    for(let i = 0; i < this.length; i++){
        this[i][name] = value;
    }
    return this;
}
function attr(name, value) {
    let attributes;
    if (typeof name === 'string') {
        if (value === undefined) {
            const [el] = this;
            if (!el) return null;
            return el.getAttribute(name);
        } else {
            attributes = {
                [name]: value
            };
        }
    } else if (!name) {
        throw new Error('no attributes provided');
    } else {
        attributes = name;
    }
    for(let attr in attributes){
        if (attributes.hasOwnProperty(attr)) {
            const value = attributes[attr];
            if (propertiesMap[attr]) {
                this.prop(propertiesMap[attr], value);
                continue;
            }
            for(let i = 0; i < this.length; i++){
                if (value === null) {
                    this[i].removeAttribute(attr);
                } else {
                    this[i].setAttribute(attr, value);
                }
            }
        }
    }
    return this;
}
const methods = {
    prop,
    attr
};
Object.keys(propertySetters).forEach((methodName)=>{
    methods[methodName] = function(...args) {
        return this.prop(propertySetters[methodName], ...args);
    };
});
const __TURBOPACK__default__export__ = methods;
}}),
"[project]/node_modules/@joint/core/src/mvc/Dom/events.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
// TODO: should not read config outside the mvc package
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$config$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/config/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/Dom.mjs [app-client] (ecmascript)");
;
;
// Special events
const special = Object.create(null);
const __TURBOPACK__default__export__ = special;
special.load = {
    // Prevent triggered image.load events from bubbling to window.load
    noBubble: true
};
// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in $.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
[
    [
        'mouseenter',
        'mouseover'
    ],
    [
        'mouseleave',
        'mouseout'
    ],
    [
        'pointerenter',
        'pointerover'
    ],
    [
        'pointerleave',
        'pointerout'
    ]
].forEach(([orig, fix])=>{
    special[orig] = {
        delegateType: fix,
        bindType: fix,
        handle: function(event) {
            const target = this;
            const related = event.relatedTarget;
            const handleObj = event.handleObj;
            let ret;
            // For mouseenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if (!related || !target.contains(related)) {
                event.type = handleObj.origType;
                ret = handleObj.handler.apply(target, arguments);
                event.type = fix;
            }
            return ret;
        }
    };
});
// Gestures
const maxDelay = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$config$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["config"].doubleTapInterval;
const minDelay = 30;
special.dbltap = {
    bindType: 'touchend',
    delegateType: 'touchend',
    handle: function(event, ...args) {
        const { handleObj, target } = event;
        const targetData = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].data.create(target);
        const now = new Date().getTime();
        const delta = 'lastTouch' in targetData ? now - targetData.lastTouch : 0;
        if (delta < maxDelay && delta > minDelay) {
            targetData.lastTouch = null;
            event.type = handleObj.origType;
            // let $ handle the triggering of "dbltap" event handlers
            handleObj.handler.call(this, event, ...args);
        } else {
            targetData.lastTouch = now;
        }
    }
};
}}),
"[project]/node_modules/@joint/core/src/mvc/Dom/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/Dom.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$methods$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/methods.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$animations$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/animations.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$props$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/props.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/events.mjs [app-client] (ecmascript)");
;
;
;
;
;
Object.assign(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fn, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$methods$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__);
Object.assign(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fn, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$animations$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__);
Object.assign(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fn, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$props$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
Object.assign(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].event.special, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]);
const __TURBOPACK__default__export__ = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Dom$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"];
}}),
"[project]/node_modules/@joint/core/src/mvc/ViewBase.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "ViewBase": (()=>ViewBase)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/util/utilHelpers.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Events.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$mvcUtils$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/mvcUtils.mjs [app-client] (ecmascript)");
;
;
;
;
var ViewBase = function(options) {
    this.cid = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["uniqueId"])('view');
    this.preinitialize.apply(this, arguments);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])(this, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pick"])(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
};
// Cached regex to split keys for `delegate`.
var delegateEventSplitter = /^(\S+)\s*(.*)$/;
// List of view options to be set as properties.
// TODO: `style` attribute is not supported in ViewBase class yet, but only in View class that extends ViewBase.
var viewOptions = [
    'model',
    'collection',
    'el',
    'id',
    'attributes',
    'className',
    'tagName',
    'events',
    'style'
];
// Set up all inheritable **ViewBase** properties and methods.
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])(ViewBase.prototype, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Events"], {
    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',
    // mvc.$ delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
        return this.$el.find(selector);
    },
    // preinitialize is an empty function by default. You can override it with a function
    // or object.  preinitialize will run before any instantiation logic is run in the View
    preinitialize: function() {
    // No implementation.
    },
    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function() {
    // No implementation.
    },
    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
        return this;
    },
    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Events listeners.
    remove: function() {
        this._removeElement();
        this.stopListening();
        return this;
    },
    // Remove this view's element from the document and all event listeners
    // attached to it. Exposed for subclasses using an alternative DOM
    // manipulation API.
    _removeElement: function() {
        this.$el.remove();
    },
    // Change the view's element (`this.el` property) and re-delegate the
    // view's events on the new element.
    setElement: function(element) {
        this.undelegateEvents();
        this._setElement(element);
        this.delegateEvents();
        return this;
    },
    // Creates the `this.el` and `this.$el` references for this view using the
    // given `el`. `el` can be a CSS selector or an HTML string, a mvc.$
    // context or an element. Subclasses can override this to utilize an
    // alternative DOM manipulation API and are only required to set the
    // `this.el` property.
    _setElement: function(el) {
        this.$el = el instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] ? el : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(el);
        this.el = this.$el[0];
    },
    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    delegateEvents: function(events) {
        events || (events = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["result"])(this, 'events'));
        if (!events) return this;
        this.undelegateEvents();
        for(var key in events){
            var method = events[key];
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isFunction"])(method)) method = this[method];
            if (!method) continue;
            var match = key.match(delegateEventSplitter);
            this.delegate(match[1], match[2], method.bind(this));
        }
        return this;
    },
    // Add a single event listener to the view's element (or a child element
    // using `selector`). This only works for delegate-able events: not `focus`,
    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.
    delegate: function(eventName, selector, listener) {
        this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);
        return this;
    },
    // Clears all callbacks previously bound to the view by `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // viewbases attached to the same DOM element.
    undelegateEvents: function() {
        if (this.$el) this.$el.off('.delegateEvents' + this.cid);
        return this;
    },
    // A finer-grained `undelegateEvents` for removing a single delegated event.
    // `selector` and `listener` are both optional.
    undelegate: function(eventName, selector, listener) {
        this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);
        return this;
    },
    // Produces a DOM element to be assigned to your view. Exposed for
    // subclasses using an alternative DOM manipulation API.
    _createElement: function(tagName) {
        return document.createElement(tagName);
    },
    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
        if (!this.el) {
            var attrs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assign"])({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["result"])(this, 'attributes'));
            if (this.id) attrs.id = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["result"])(this, 'id');
            if (this.className) attrs['class'] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["result"])(this, 'className');
            this.setElement(this._createElement((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["result"])(this, 'tagName')));
            this._setAttributes(attrs);
        } else {
            this.setElement((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$utilHelpers$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["result"])(this, 'el'));
        }
    },
    // Set attributes from a hash on this view's element.  Exposed for
    // subclasses using an alternative DOM manipulation API.
    _setAttributes: function(attributes) {
        this.$el.attr(attributes);
    }
});
// Set up inheritance for the view.
ViewBase.extend = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$mvcUtils$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["extend"];
}}),
"[project]/node_modules/@joint/core/src/mvc/View.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "View": (()=>View),
    "views": (()=>views)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$ViewBase$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/ViewBase.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/util/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$config$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/config/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$V$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/V/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/index.mjs [app-client] (ecmascript)");
;
;
;
;
;
const views = {};
const View = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$ViewBase$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ViewBase"].extend({
    options: {},
    theme: null,
    themeClassNamePrefix: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.addClassNamePrefix('theme-'),
    requireSetThemeOverride: false,
    defaultTheme: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$config$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["config"].defaultTheme,
    children: null,
    childNodes: null,
    DETACHABLE: true,
    UPDATE_PRIORITY: 2,
    FLAG_INSERT: 1 << 30,
    FLAG_REMOVE: 1 << 29,
    FLAG_INIT: 1 << 28,
    constructor: function(options) {
        this.requireSetThemeOverride = options && !!options.theme;
        this.options = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.assign({}, this.options, options);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$ViewBase$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ViewBase"].call(this, options);
    },
    initialize: function() {
        views[this.cid] = this;
        this.setTheme(this.options.theme || this.defaultTheme);
        this.init();
    },
    unmount: function() {
        if (this.svgElement) {
            this.vel.remove();
        } else {
            this.$el.remove();
        }
    },
    isMounted: function() {
        return this.el.parentNode !== null;
    },
    renderChildren: function(children) {
        children || (children = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.result(this, 'children'));
        if (children) {
            var isSVG = this.svgElement;
            var namespace = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$V$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].namespace[isSVG ? 'svg' : 'xhtml'];
            var doc = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.parseDOMJSON(children, namespace);
            (isSVG ? this.vel : this.$el).empty().append(doc.fragment);
            this.childNodes = doc.selectors;
        }
        return this;
    },
    findAttributeNode: function(attributeName, node) {
        let currentNode = node;
        while(currentNode && currentNode.nodeType === 1){
            // attribute found
            // (empty value does not count as attribute found)
            if (currentNode.getAttribute(attributeName)) return currentNode;
            // do not climb up the DOM
            if (currentNode === this.el) return null;
            // try parent node
            currentNode = currentNode.parentNode;
        }
        return null;
    },
    findAttribute: function(attributeName, node) {
        const matchedNode = this.findAttributeNode(attributeName, node);
        return matchedNode && matchedNode.getAttribute(attributeName);
    },
    // Override the mvc ViewBase `_ensureElement()` method in order to create an
    // svg element (e.g., `<g>`) node that wraps all the nodes of the Cell view.
    // Expose class name setter as a separate method.
    _ensureElement: function() {
        if (!this.el) {
            var tagName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.result(this, 'tagName');
            var attrs = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.assign({}, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.result(this, 'attributes'));
            var style = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.assign({}, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.result(this, 'style'));
            if (this.id) attrs.id = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.result(this, 'id');
            this.setElement(this._createElement(tagName));
            this._setAttributes(attrs);
            this._setStyle(style);
        } else {
            this.setElement(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.result(this, 'el'));
        }
        this._ensureElClassName();
    },
    _setAttributes: function(attrs) {
        if (this.svgElement) {
            this.vel.attr(attrs);
        } else {
            this.$el.attr(attrs);
        }
    },
    _setStyle: function(style) {
        this.$el.css(style);
    },
    _createElement: function(tagName) {
        if (this.svgElement) {
            return document.createElementNS(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$V$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].namespace.svg, tagName);
        } else {
            return document.createElement(tagName);
        }
    },
    // Utilize an alternative DOM manipulation API by
    // adding an element reference wrapped in Vectorizer.
    _setElement: function(el) {
        this.$el = el instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"] ? el : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(el);
        this.el = this.$el[0];
        if (this.svgElement) this.vel = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$V$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(this.el);
    },
    _ensureElClassName: function() {
        var className = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.result(this, 'className');
        if (!className) return;
        var prefixedClassName = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.addClassNamePrefix(className);
        // Note: className removal here kept for backwards compatibility only
        if (this.svgElement) {
            this.vel.removeClass(className).addClass(prefixedClassName);
        } else {
            this.$el.removeClass(className).addClass(prefixedClassName);
        }
    },
    init: function() {
    // Intentionally empty.
    // This method is meant to be overridden.
    },
    onRender: function() {
    // Intentionally empty.
    // This method is meant to be overridden.
    },
    confirmUpdate: function() {
        // Intentionally empty.
        // This method is meant to be overridden.
        return 0;
    },
    setTheme: function(theme, opt) {
        opt = opt || {};
        // Theme is already set, override is required, and override has not been set.
        // Don't set the theme.
        if (this.theme && this.requireSetThemeOverride && !opt.override) {
            return this;
        }
        this.removeThemeClassName();
        this.addThemeClassName(theme);
        this.onSetTheme(this.theme /* oldTheme */ , theme /* newTheme */ );
        this.theme = theme;
        return this;
    },
    addThemeClassName: function(theme) {
        theme = theme || this.theme;
        if (!theme) return this;
        var className = this.themeClassNamePrefix + theme;
        if (this.svgElement) {
            this.vel.addClass(className);
        } else {
            this.$el.addClass(className);
        }
        return this;
    },
    removeThemeClassName: function(theme) {
        theme = theme || this.theme;
        var className = this.themeClassNamePrefix + theme;
        if (this.svgElement) {
            this.vel.removeClass(className);
        } else {
            this.$el.removeClass(className);
        }
        return this;
    },
    onSetTheme: function(oldTheme, newTheme) {
    // Intentionally empty.
    // This method is meant to be overridden.
    },
    remove: function() {
        this.onRemove();
        this.undelegateDocumentEvents();
        views[this.cid] = null;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$ViewBase$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ViewBase"].prototype.remove.apply(this, arguments);
        return this;
    },
    onRemove: function() {
    // Intentionally empty.
    // This method is meant to be overridden.
    },
    getEventNamespace: function() {
        // Returns a per-session unique namespace
        return '.joint-event-ns-' + this.cid;
    },
    delegateElementEvents: function(element, events, data) {
        if (!events) return this;
        data || (data = {});
        var eventNS = this.getEventNamespace();
        for(var eventName in events){
            var method = events[eventName];
            if (typeof method !== 'function') method = this[method];
            if (!method) continue;
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(element).on(eventName + eventNS, data, method.bind(this));
        }
        return this;
    },
    undelegateElementEvents: function(element) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"])(element).off(this.getEventNamespace());
        return this;
    },
    delegateDocumentEvents: function(events, data) {
        events || (events = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.result(this, 'documentEvents'));
        return this.delegateElementEvents(document, events, data);
    },
    undelegateDocumentEvents: function() {
        return this.undelegateElementEvents(document);
    },
    eventData: function(evt, data) {
        if (!evt) throw new Error('eventData(): event object required.');
        var currentData = evt.data;
        var key = '__' + this.cid + '__';
        if (data === undefined) {
            if (!currentData) return {};
            return currentData[key] || {};
        }
        currentData || (currentData = evt.data = {});
        currentData[key] || (currentData[key] = {});
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.assign(currentData[key], data);
        return this;
    },
    stopPropagation: function(evt) {
        this.eventData(evt, {
            propagationStopped: true
        });
        return this;
    },
    isPropagationStopped: function(evt) {
        return !!this.eventData(evt).propagationStopped;
    }
}, {
    extend: function() {
        var args = Array.from(arguments);
        // Deep clone the prototype and static properties objects.
        // This prevents unexpected behavior where some properties are overwritten outside of this function.
        var protoProps = args[0] && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.assign({}, args[0]) || {};
        var staticProps = args[1] && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$util$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__.assign({}, args[1]) || {};
        // Need the real render method so that we can wrap it and call it later.
        var renderFn = protoProps.render || this.prototype && this.prototype.render || null;
        /*
            Wrap the real render method so that:
                .. `onRender` is always called.
                .. `this` is always returned.
        */ protoProps.render = function() {
            if (typeof renderFn === 'function') {
                // Call the original render method.
                renderFn.apply(this, arguments);
            }
            if (this.render.__render__ === renderFn) {
                // Should always call onRender() method.
                // Should call it only once when renderFn is actual prototype method i.e. not the wrapper
                this.onRender();
            }
            // Should always return itself.
            return this;
        };
        protoProps.render.__render__ = renderFn;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$ViewBase$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ViewBase"].extend.call(this, protoProps, staticProps);
    }
});
}}),
"[project]/node_modules/@joint/core/src/mvc/index.mjs [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({});
;
;
;
;
;
;
;
;
;
}}),
"[project]/node_modules/@joint/core/src/mvc/index.mjs [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/index.mjs [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@joint/core/src/mvc/Listener.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "Listener": (()=>Listener)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Events.mjs [app-client] (ecmascript)");
;
class Listener {
    constructor(...callbackArguments){
        this.callbackArguments = callbackArguments;
    }
    listenTo(object, evt, ...args) {
        const { callbackArguments } = this;
        // signature 1 - (object, eventHashMap, context)
        if (evt && typeof evt === 'object') {
            const [context = null] = args;
            Object.entries(evt).forEach(([eventName, cb])=>{
                if (typeof cb !== 'function') return;
                // Invoke the callback with callbackArguments passed first
                if (context || callbackArguments.length > 0) cb = cb.bind(context, ...callbackArguments);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Events"].listenTo.call(this, object, eventName, cb);
            });
        } else if (typeof evt === 'string' && typeof args[0] === 'function') {
            let [cb, context = null] = args;
            // Invoke the callback with callbackArguments passed first
            if (context || callbackArguments.length > 0) cb = cb.bind(context, ...callbackArguments);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Events"].listenTo.call(this, object, evt, cb);
        }
    }
    stopListening() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Events"].stopListening.call(this);
    }
}
}}),
"[project]/node_modules/@joint/core/src/mvc/index.mjs [app-client] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "$": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]),
    "Collection": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Collection$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Collection"]),
    "Data": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Data$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]),
    "Event": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Event$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Event"]),
    "Events": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Events"]),
    "Listener": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Listener$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Listener"]),
    "Model": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Model$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["Model"]),
    "View": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$View$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["View"]),
    "ViewBase": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$ViewBase$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ViewBase"]),
    "views": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$View$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["views"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/index.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Data$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Data.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$View$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/View.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Listener$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Listener.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Events$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Events.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Collection$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Collection.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Model$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Model.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$ViewBase$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/ViewBase.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$Dom$2f$Event$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/Dom/Event.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/index.mjs [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/@joint/core/src/mvc/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, t: __turbopack_require_real__ } = __turbopack_context__;
{
__turbopack_esm__({
    "$": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["$"]),
    "Collection": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Collection"]),
    "Data": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Data"]),
    "Event": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Event"]),
    "Events": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Events"]),
    "Listener": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Listener"]),
    "Model": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Model"]),
    "View": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["View"]),
    "ViewBase": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ViewBase"]),
    "views": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__["views"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/index.mjs [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$joint$2f$core$2f$src$2f$mvc$2f$index$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_import__("[project]/node_modules/@joint/core/src/mvc/index.mjs [app-client] (ecmascript) <exports>");
}}),
}]);

//# sourceMappingURL=node_modules_%40joint_core_src_mvc_17f5e1._.js.map