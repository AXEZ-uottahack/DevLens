(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_@maxgraph_core_lib_util_fbe9a3._.js", {

"[project]/node_modules/@maxgraph/core/lib/util/Constants.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ /**
 * Defines the portion of the cell which is to be used as a connectable
 * region. Default is 0.3. Possible values are 0 < x <= 1.
 */ __turbopack_esm__({
    "ABSOLUTE_LINE_HEIGHT": (()=>ABSOLUTE_LINE_HEIGHT),
    "ALIGN": (()=>ALIGN),
    "ARROW": (()=>ARROW),
    "ARROW_SIZE": (()=>ARROW_SIZE),
    "ARROW_SPACING": (()=>ARROW_SPACING),
    "ARROW_WIDTH": (()=>ARROW_WIDTH),
    "CONNECT_HANDLE_FILLCOLOR": (()=>CONNECT_HANDLE_FILLCOLOR),
    "CONNECT_TARGET_COLOR": (()=>CONNECT_TARGET_COLOR),
    "CURSOR": (()=>CURSOR),
    "DEFAULT_FONTFAMILY": (()=>DEFAULT_FONTFAMILY),
    "DEFAULT_FONTSIZE": (()=>DEFAULT_FONTSIZE),
    "DEFAULT_FONTSTYLE": (()=>DEFAULT_FONTSTYLE),
    "DEFAULT_HOTSPOT": (()=>DEFAULT_HOTSPOT),
    "DEFAULT_IMAGESIZE": (()=>DEFAULT_IMAGESIZE),
    "DEFAULT_INVALID_COLOR": (()=>DEFAULT_INVALID_COLOR),
    "DEFAULT_MARKERSIZE": (()=>DEFAULT_MARKERSIZE),
    "DEFAULT_STARTSIZE": (()=>DEFAULT_STARTSIZE),
    "DEFAULT_TEXT_DIRECTION": (()=>DEFAULT_TEXT_DIRECTION),
    "DEFAULT_VALID_COLOR": (()=>DEFAULT_VALID_COLOR),
    "DIALECT": (()=>DIALECT),
    "DIRECTION": (()=>DIRECTION),
    "DIRECTION_MASK": (()=>DIRECTION_MASK),
    "DROP_TARGET_COLOR": (()=>DROP_TARGET_COLOR),
    "EDGESTYLE": (()=>EDGESTYLE),
    "EDGE_SELECTION_COLOR": (()=>EDGE_SELECTION_COLOR),
    "EDGE_SELECTION_DASHED": (()=>EDGE_SELECTION_DASHED),
    "EDGE_SELECTION_STROKEWIDTH": (()=>EDGE_SELECTION_STROKEWIDTH),
    "ELBOW": (()=>ELBOW),
    "ENTITY_SEGMENT": (()=>ENTITY_SEGMENT),
    "FONT": (()=>FONT),
    "GUIDE_COLOR": (()=>GUIDE_COLOR),
    "GUIDE_STROKEWIDTH": (()=>GUIDE_STROKEWIDTH),
    "HANDLE_FILLCOLOR": (()=>HANDLE_FILLCOLOR),
    "HANDLE_SIZE": (()=>HANDLE_SIZE),
    "HANDLE_STROKECOLOR": (()=>HANDLE_STROKECOLOR),
    "HIGHLIGHT_COLOR": (()=>HIGHLIGHT_COLOR),
    "HIGHLIGHT_OPACITY": (()=>HIGHLIGHT_OPACITY),
    "HIGHLIGHT_SIZE": (()=>HIGHLIGHT_SIZE),
    "HIGHLIGHT_STROKEWIDTH": (()=>HIGHLIGHT_STROKEWIDTH),
    "IDENTITY_FIELD_NAME": (()=>IDENTITY_FIELD_NAME),
    "INVALID_COLOR": (()=>INVALID_COLOR),
    "INVALID_CONNECT_TARGET_COLOR": (()=>INVALID_CONNECT_TARGET_COLOR),
    "LABEL_HANDLE_FILLCOLOR": (()=>LABEL_HANDLE_FILLCOLOR),
    "LABEL_HANDLE_SIZE": (()=>LABEL_HANDLE_SIZE),
    "LINE_ARCSIZE": (()=>LINE_ARCSIZE),
    "LINE_HEIGHT": (()=>LINE_HEIGHT),
    "LOCKED_HANDLE_FILLCOLOR": (()=>LOCKED_HANDLE_FILLCOLOR),
    "MAX_HOTSPOT_SIZE": (()=>MAX_HOTSPOT_SIZE),
    "MIN_HOTSPOT_SIZE": (()=>MIN_HOTSPOT_SIZE),
    "NODETYPE": (()=>NODETYPE),
    "NONE": (()=>NONE),
    "NS_SVG": (()=>NS_SVG),
    "NS_XLINK": (()=>NS_XLINK),
    "OUTLINE_COLOR": (()=>OUTLINE_COLOR),
    "OUTLINE_HANDLE_FILLCOLOR": (()=>OUTLINE_HANDLE_FILLCOLOR),
    "OUTLINE_HANDLE_STROKECOLOR": (()=>OUTLINE_HANDLE_STROKECOLOR),
    "OUTLINE_HIGHLIGHT_COLOR": (()=>OUTLINE_HIGHLIGHT_COLOR),
    "OUTLINE_HIGHLIGHT_STROKEWIDTH": (()=>OUTLINE_HIGHLIGHT_STROKEWIDTH),
    "OUTLINE_STROKEWIDTH": (()=>OUTLINE_STROKEWIDTH),
    "PAGE_FORMAT_A4_LANDSCAPE": (()=>PAGE_FORMAT_A4_LANDSCAPE),
    "PAGE_FORMAT_A4_PORTRAIT": (()=>PAGE_FORMAT_A4_PORTRAIT),
    "PAGE_FORMAT_LETTER_LANDSCAPE": (()=>PAGE_FORMAT_LETTER_LANDSCAPE),
    "PAGE_FORMAT_LETTER_PORTRAIT": (()=>PAGE_FORMAT_LETTER_PORTRAIT),
    "PERIMETER": (()=>PERIMETER),
    "RECTANGLE_ROUNDING_FACTOR": (()=>RECTANGLE_ROUNDING_FACTOR),
    "RENDERING_HINT": (()=>RENDERING_HINT),
    "SHADOWCOLOR": (()=>SHADOWCOLOR),
    "SHADOW_OFFSET_X": (()=>SHADOW_OFFSET_X),
    "SHADOW_OFFSET_Y": (()=>SHADOW_OFFSET_Y),
    "SHADOW_OPACITY": (()=>SHADOW_OPACITY),
    "SHAPE": (()=>SHAPE),
    "TEXT_DIRECTION": (()=>TEXT_DIRECTION),
    "TOOLTIP_VERTICAL_OFFSET": (()=>TOOLTIP_VERTICAL_OFFSET),
    "VALID_COLOR": (()=>VALID_COLOR),
    "VERTEX_SELECTION_COLOR": (()=>VERTEX_SELECTION_COLOR),
    "VERTEX_SELECTION_DASHED": (()=>VERTEX_SELECTION_DASHED),
    "VERTEX_SELECTION_STROKEWIDTH": (()=>VERTEX_SELECTION_STROKEWIDTH),
    "WORD_WRAP": (()=>WORD_WRAP)
});
const DEFAULT_HOTSPOT = 0.3;
const MIN_HOTSPOT_SIZE = 8;
const MAX_HOTSPOT_SIZE = 0;
var RENDERING_HINT;
(function(RENDERING_HINT) {
    RENDERING_HINT["EXACT"] = "exact";
    RENDERING_HINT["FASTER"] = "faster";
    RENDERING_HINT["FASTEST"] = "fastest";
})(RENDERING_HINT || (RENDERING_HINT = {}));
var DIALECT;
(function(DIALECT) {
    /** the SVG display dialect name. */ DIALECT["SVG"] = "svg";
    /** the mixed HTML display dialect name. */ DIALECT["MIXEDHTML"] = "mixedHtml";
    /** the preferred HTML display dialect name. */ DIALECT["PREFERHTML"] = "preferHtml";
    /** the strict HTML display dialect name. */ DIALECT["STRICTHTML"] = "strictHtml";
})(DIALECT || (DIALECT = {}));
const IDENTITY_FIELD_NAME = 'mxObjectId';
const NS_SVG = 'http://www.w3.org/2000/svg';
const NS_XLINK = 'http://www.w3.org/1999/xlink';
const SHADOWCOLOR = 'gray';
const SHADOW_OFFSET_X = 2;
const SHADOW_OFFSET_Y = 3;
const SHADOW_OPACITY = 1;
var NODETYPE;
(function(NODETYPE) {
    NODETYPE[NODETYPE["ELEMENT"] = 1] = "ELEMENT";
    NODETYPE[NODETYPE["ATTRIBUTE"] = 2] = "ATTRIBUTE";
    NODETYPE[NODETYPE["TEXT"] = 3] = "TEXT";
    NODETYPE[NODETYPE["CDATA"] = 4] = "CDATA";
    NODETYPE[NODETYPE["ENTITY_REFERENCE"] = 5] = "ENTITY_REFERENCE";
    NODETYPE[NODETYPE["ENTITY"] = 6] = "ENTITY";
    NODETYPE[NODETYPE["PROCESSING_INSTRUCTION"] = 7] = "PROCESSING_INSTRUCTION";
    NODETYPE[NODETYPE["COMMENT"] = 8] = "COMMENT";
    NODETYPE[NODETYPE["DOCUMENT"] = 9] = "DOCUMENT";
    NODETYPE[NODETYPE["DOCUMENTTYPE"] = 10] = "DOCUMENTTYPE";
    NODETYPE[NODETYPE["DOCUMENT_FRAGMENT"] = 11] = "DOCUMENT_FRAGMENT";
    NODETYPE[NODETYPE["NOTATION"] = 12] = "NOTATION";
})(NODETYPE || (NODETYPE = {}));
const TOOLTIP_VERTICAL_OFFSET = 16;
const DEFAULT_VALID_COLOR = '#00FF00';
const DEFAULT_INVALID_COLOR = '#FF0000';
const OUTLINE_HIGHLIGHT_COLOR = '#00FF00';
const OUTLINE_HIGHLIGHT_STROKEWIDTH = 5;
const HIGHLIGHT_STROKEWIDTH = 3;
const HIGHLIGHT_SIZE = 2;
const HIGHLIGHT_OPACITY = 100;
var CURSOR;
(function(CURSOR) {
    /** Defines the cursor for a movable vertex. */ CURSOR["MOVABLE_VERTEX"] = "move";
    /** Defines the cursor for a movable edge. */ CURSOR["MOVABLE_EDGE"] = "move";
    /** Defines the cursor for a movable label. */ CURSOR["LABEL_HANDLE"] = "default";
    /** Defines the cursor for a terminal handle. */ CURSOR["TERMINAL_HANDLE"] = "pointer";
    /** Defines the cursor for a movable bend. */ CURSOR["BEND_HANDLE"] = "crosshair";
    /** Defines the cursor for a movable bend. */ CURSOR["VIRTUAL_BEND_HANDLE"] = "crosshair";
    /** Defines the cursor for a connectable state. */ CURSOR["CONNECT"] = "pointer";
})(CURSOR || (CURSOR = {}));
const HIGHLIGHT_COLOR = '#00FF00';
const CONNECT_TARGET_COLOR = '#0000FF';
const INVALID_CONNECT_TARGET_COLOR = '#FF0000';
const DROP_TARGET_COLOR = '#0000FF';
const VALID_COLOR = '#00FF00';
const INVALID_COLOR = '#FF0000';
const EDGE_SELECTION_COLOR = '#00FF00';
const VERTEX_SELECTION_COLOR = '#00FF00';
const VERTEX_SELECTION_STROKEWIDTH = 1;
const EDGE_SELECTION_STROKEWIDTH = 1;
const VERTEX_SELECTION_DASHED = true;
const EDGE_SELECTION_DASHED = true;
const GUIDE_COLOR = '#FF0000';
const GUIDE_STROKEWIDTH = 1;
const OUTLINE_COLOR = '#0099FF';
const OUTLINE_STROKEWIDTH = 3;
const HANDLE_SIZE = 6;
const LABEL_HANDLE_SIZE = 4;
const HANDLE_FILLCOLOR = '#00FF00';
const HANDLE_STROKECOLOR = 'black';
const LABEL_HANDLE_FILLCOLOR = 'yellow';
const CONNECT_HANDLE_FILLCOLOR = '#0000FF';
const LOCKED_HANDLE_FILLCOLOR = '#FF0000';
const OUTLINE_HANDLE_FILLCOLOR = '#00FFFF';
const OUTLINE_HANDLE_STROKECOLOR = '#0033FF';
const DEFAULT_FONTFAMILY = 'Arial,Helvetica';
const DEFAULT_FONTSIZE = 11;
const DEFAULT_TEXT_DIRECTION = '';
const LINE_HEIGHT = 1.2;
const WORD_WRAP = 'normal';
const ABSOLUTE_LINE_HEIGHT = false;
const DEFAULT_FONTSTYLE = 0;
const DEFAULT_STARTSIZE = 40;
const DEFAULT_MARKERSIZE = 6;
const DEFAULT_IMAGESIZE = 24;
const ENTITY_SEGMENT = 30;
const RECTANGLE_ROUNDING_FACTOR = 0.15;
const LINE_ARCSIZE = 20;
const ARROW_SPACING = 0;
const ARROW_WIDTH = 30;
const ARROW_SIZE = 30;
const PAGE_FORMAT_A4_PORTRAIT = [
    0,
    0,
    827,
    1169
];
const PAGE_FORMAT_A4_LANDSCAPE = [
    0,
    0,
    1169,
    827
];
const PAGE_FORMAT_LETTER_PORTRAIT = [
    0,
    0,
    850,
    1100
];
const PAGE_FORMAT_LETTER_LANDSCAPE = [
    0,
    0,
    1100,
    850
];
const NONE = 'none';
var FONT;
(function(FONT) {
    /** for bold fonts. */ FONT[FONT["BOLD"] = 1] = "BOLD";
    /** for italic fonts. */ FONT[FONT["ITALIC"] = 2] = "ITALIC";
    /** for underlined fonts. */ FONT[FONT["UNDERLINE"] = 4] = "UNDERLINE";
    /** for strikethrough fonts. */ FONT[FONT["STRIKETHROUGH"] = 8] = "STRIKETHROUGH";
})(FONT || (FONT = {}));
var ARROW;
(function(ARROW) {
    /** for classic arrow markers. */ ARROW["CLASSIC"] = "classic";
    /** for thin classic arrow markers. */ ARROW["CLASSIC_THIN"] = "classicThin";
    /** for block arrow markers. */ ARROW["BLOCK"] = "block";
    /** for thin block arrow markers. */ ARROW["BLOCK_THIN"] = "blockThin";
    /** for open arrow markers. */ ARROW["OPEN"] = "open";
    /** for thin open arrow markers. */ ARROW["OPEN_THIN"] = "openThin";
    /** for oval arrow markers. */ ARROW["OVAL"] = "oval";
    /** for diamond arrow markers. */ ARROW["DIAMOND"] = "diamond";
    /** for thin diamond arrow markers. */ ARROW["DIAMOND_THIN"] = "diamondThin";
})(ARROW || (ARROW = {}));
var ALIGN;
(function(ALIGN) {
    /** left horizontal alignment. */ ALIGN["LEFT"] = "left";
    /** center horizontal alignment. */ ALIGN["CENTER"] = "center";
    /** right horizontal alignment. */ ALIGN["RIGHT"] = "right";
    /** top vertical alignment. */ ALIGN["TOP"] = "top";
    /** middle vertical alignment. */ ALIGN["MIDDLE"] = "middle";
    /** bottom vertical alignment. */ ALIGN["BOTTOM"] = "bottom";
})(ALIGN || (ALIGN = {}));
var DIRECTION;
(function(DIRECTION) {
    DIRECTION["NORTH"] = "north";
    DIRECTION["SOUTH"] = "south";
    DIRECTION["EAST"] = "east";
    DIRECTION["WEST"] = "west";
})(DIRECTION || (DIRECTION = {}));
var TEXT_DIRECTION;
(function(TEXT_DIRECTION) {
    /**
     * Use this value to use the default text direction of the operating system. */ TEXT_DIRECTION["DEFAULT"] = "";
    /** Use this value to find the direction for a given text with {@link Text#getAutoDirection}. */ TEXT_DIRECTION["AUTO"] = "auto";
    /** Use this value for left to right text direction. */ TEXT_DIRECTION["LTR"] = "ltr";
    /** Use this value for right to left text direction. */ TEXT_DIRECTION["RTL"] = "rtl";
})(TEXT_DIRECTION || (TEXT_DIRECTION = {}));
const DIRECTION_MASK = {
    /** No direction. */ NONE: 0,
    WEST: 1,
    NORTH: 2,
    SOUTH: 4,
    EAST: 8,
    /** All directions. */ ALL: 15
};
var ELBOW;
(function(ELBOW) {
    ELBOW["VERTICAL"] = "vertical";
    ELBOW["HORIZONTAL"] = "horizontal";
})(ELBOW || (ELBOW = {}));
var EDGESTYLE;
(function(EDGESTYLE) {
    EDGESTYLE["ELBOW"] = "elbowEdgeStyle";
    EDGESTYLE["ENTITY_RELATION"] = "entityRelationEdgeStyle";
    EDGESTYLE["LOOP"] = "loopEdgeStyle";
    EDGESTYLE["SIDETOSIDE"] = "sideToSideEdgeStyle";
    EDGESTYLE["TOPTOBOTTOM"] = "topToBottomEdgeStyle";
    EDGESTYLE["ORTHOGONAL"] = "orthogonalEdgeStyle";
    EDGESTYLE["SEGMENT"] = "segmentEdgeStyle";
    EDGESTYLE["MANHATTAN"] = "manhattanEdgeStyle";
})(EDGESTYLE || (EDGESTYLE = {}));
var PERIMETER;
(function(PERIMETER) {
    PERIMETER["ELLIPSE"] = "ellipsePerimeter";
    PERIMETER["RECTANGLE"] = "rectanglePerimeter";
    PERIMETER["RHOMBUS"] = "rhombusPerimeter";
    PERIMETER["HEXAGON"] = "hexagonPerimeter";
    PERIMETER["TRIANGLE"] = "trianglePerimeter";
})(PERIMETER || (PERIMETER = {}));
var SHAPE;
(function(SHAPE) {
    /**
     * Name under which {@link RectangleShape} is registered.
     */ SHAPE["RECTANGLE"] = "rectangle";
    /**
     * Name under which {@link Ellipse} is registered.
     */ SHAPE["ELLIPSE"] = "ellipse";
    /**
     * Name under which {@link DoubleEllipse} is registered.
     */ SHAPE["DOUBLE_ELLIPSE"] = "doubleEllipse";
    /**
     * Name under which {@link Rhombus} is registered.
     */ SHAPE["RHOMBUS"] = "rhombus";
    /**
     * Name under which {@link LineShape} is registered.
     */ SHAPE["LINE"] = "line";
    /**
     * Name under which {@link ImageShape} is registered.
     */ SHAPE["IMAGE"] = "image";
    /**
     * Name under which {@link ArrowShape} is registered.
     */ SHAPE["ARROW"] = "arrow";
    /**
     * Name under which {@link ArrowConnectorShape} is registered.
     */ SHAPE["ARROW_CONNECTOR"] = "arrowConnector";
    /**
     * Name under which {@link Label} is registered.
     */ SHAPE["LABEL"] = "label";
    /**
     * Name under which {@link Cylinder} is registered.
     */ SHAPE["CYLINDER"] = "cylinder";
    /**
     * Name under which {@link Swimlane} is registered.
     */ SHAPE["SWIMLANE"] = "swimlane";
    /**
     * Name under which {@link ConnectorShape} is registered.
     */ SHAPE["CONNECTOR"] = "connector";
    /**
     * Name under which {@link Actor} is registered.
     */ SHAPE["ACTOR"] = "actor";
    /**
     * Name under which {@link Cloud} is registered.
     */ SHAPE["CLOUD"] = "cloud";
    /**
     * Name under which {@link Triangle} is registered.
     */ SHAPE["TRIANGLE"] = "triangle";
    /**
     * Name under which {@link Hexagon} is registered.
     */ SHAPE["HEXAGON"] = "hexagon";
})(SHAPE || (SHAPE = {}));
}}),
"[project]/node_modules/@maxgraph/core/lib/util/EventUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "getClientX": (()=>getClientX),
    "getClientY": (()=>getClientY),
    "getMainEvent": (()=>getMainEvent),
    "getSource": (()=>getSource),
    "isAltDown": (()=>isAltDown),
    "isConsumed": (()=>isConsumed),
    "isControlDown": (()=>isControlDown),
    "isLeftMouseButton": (()=>isLeftMouseButton),
    "isMetaDown": (()=>isMetaDown),
    "isMiddleMouseButton": (()=>isMiddleMouseButton),
    "isMouseEvent": (()=>isMouseEvent),
    "isMultiTouchEvent": (()=>isMultiTouchEvent),
    "isPenEvent": (()=>isPenEvent),
    "isPopupTrigger": (()=>isPopupTrigger),
    "isRightMouseButton": (()=>isRightMouseButton),
    "isShiftDown": (()=>isShiftDown),
    "isTouchEvent": (()=>isTouchEvent)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/Client.js [app-client] (ecmascript)");
;
const getMainEvent = (evt)=>{
    let t = evt;
    if ((t.type === 'touchstart' || t.type === 'touchmove') && t.touches && t.touches[0]) {
        t = t.touches[0];
    } else if (t.type === 'touchend' && t.changedTouches && t.changedTouches[0]) {
        t = t.changedTouches[0];
    }
    return t;
};
const getClientX = (evt)=>{
    return getMainEvent(evt).clientX;
};
const getClientY = (evt)=>{
    return getMainEvent(evt).clientY;
};
const getSource = (evt)=>{
    return evt.target;
};
const isConsumed = (evt)=>{
    const t = evt;
    return t.isConsumed !== undefined && t.isConsumed;
};
const isTouchEvent = (evt)=>{
    const t = evt;
    return t.pointerType ? t.pointerType === 'touch' || t.pointerType === t.MSPOINTER_TYPE_TOUCH : t.mozInputSource !== undefined ? t.mozInputSource === 5 : t.type.indexOf('touch') === 0;
};
const isPenEvent = (evt)=>{
    const t = evt;
    return t.pointerType ? t.pointerType == 'pen' || t.pointerType === t.MSPOINTER_TYPE_PEN : t.mozInputSource !== undefined ? t.mozInputSource === 2 : t.type.indexOf('pen') === 0;
};
const isMultiTouchEvent = (evt)=>{
    const t = evt;
    return t.type && t.type.indexOf('touch') == 0 && t.touches !== undefined && t.touches.length > 1;
};
const isMouseEvent = (evt)=>{
    const t = evt;
    return t.pointerType ? t.pointerType == 'mouse' || t.pointerType === t.MSPOINTER_TYPE_MOUSE : t.mozInputSource !== undefined ? t.mozInputSource === 1 : t.type.indexOf('mouse') === 0;
};
const isLeftMouseButton = (evt)=>{
    // Special case for mousemove and mousedown we check the buttons
    // if it exists because which is 0 even if no button is pressed
    if ('buttons' in evt && (evt.type === 'mousedown' || evt.type === 'mousemove')) {
        return evt.buttons === 1;
    }
    if (evt.which !== undefined) {
        return evt.which === 1;
    }
    return evt.button === 1;
};
const isMiddleMouseButton = (evt)=>{
    return evt.button === 4;
};
const isRightMouseButton = (evt)=>{
    return evt.button === 2;
};
const isPopupTrigger = (evt)=>{
    return isRightMouseButton(evt) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].IS_MAC && isControlDown(evt) && !isShiftDown(evt) && !isMetaDown(evt) && !isAltDown(evt);
};
const isShiftDown = (evt)=>{
    return evt.shiftKey;
};
const isAltDown = (evt)=>{
    return evt.altKey;
};
const isControlDown = (evt)=>{
    return evt.ctrlKey;
};
const isMetaDown = (evt)=>{
    return evt.metaKey;
};
}}),
"[project]/node_modules/@maxgraph/core/lib/util/domUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "addLinkToHead": (()=>addLinkToHead),
    "br": (()=>br),
    "clearSelection": (()=>clearSelection),
    "createImage": (()=>createImage),
    "extractTextWithWhitespace": (()=>extractTextWithWhitespace),
    "getChildNodes": (()=>getChildNodes),
    "getInnerHtml": (()=>getInnerHtml),
    "getOuterHtml": (()=>getOuterHtml),
    "getTextContent": (()=>getTextContent),
    "importNode": (()=>importNode),
    "importNodeImplementation": (()=>importNodeImplementation),
    "isAncestorNode": (()=>isAncestorNode),
    "isNode": (()=>isNode),
    "para": (()=>para),
    "setTextContent": (()=>setTextContent),
    "write": (()=>write),
    "writeln": (()=>writeln)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Constants.js [app-client] (ecmascript)");
;
const extractTextWithWhitespace = (elems)=>{
    // Known block elements for handling linefeeds (list is not complete)
    const blocks = [
        'BLOCKQUOTE',
        'DIV',
        'H1',
        'H2',
        'H3',
        'H4',
        'H5',
        'H6',
        'OL',
        'P',
        'PRE',
        'TABLE',
        'UL'
    ];
    const ret = [];
    function doExtract(elts) {
        // Single break should be ignored
        if (elts.length == 1 && (elts[0].nodeName == 'BR' || elts[0].innerHTML == '\n')) {
            return;
        }
        for(let i = 0; i < elts.length; i += 1){
            const elem = elts[i];
            // DIV with a br or linefeed forces a linefeed
            if (elem.nodeName == 'BR' || elem.innerHTML == '\n' || (elts.length == 1 || i == 0) && elem.nodeName == 'DIV' && elem.innerHTML.toLowerCase() == '<br>') {
                ret.push('\n');
            } else {
                if (elem.nodeType === 3 || elem.nodeType === 4) {
                    if (elem.nodeValue && elem.nodeValue.length > 0) {
                        ret.push(elem.nodeValue);
                    }
                } else if (elem.nodeType !== 8 && elem.childNodes.length > 0) {
                    doExtract(Array.from(elem.childNodes));
                }
                if (i < elts.length - 1 && blocks.indexOf(elts[i + 1].nodeName) >= 0) {
                    ret.push('\n');
                }
            }
        }
    }
    doExtract(elems);
    return ret.join('');
};
const getTextContent = (node)=>{
    return node != null && node.textContent ? node.textContent : '';
};
const setTextContent = (node, text)=>{
    if ('innerText' in node) {
        node.innerText = text;
    } else {
        node.textContent = text;
    }
};
const getInnerHtml = (node)=>{
    if (node != null) {
        const serializer = new XMLSerializer();
        return serializer.serializeToString(node);
    }
    return '';
};
const getOuterHtml = (node)=>{
    if (node != null) {
        const serializer = new XMLSerializer();
        return serializer.serializeToString(node);
    }
    return '';
};
const write = (parent, text)=>{
    const doc = parent.ownerDocument;
    const node = doc.createTextNode(text);
    if (parent != null) {
        parent.appendChild(node);
    }
    return node;
};
const writeln = (parent, text)=>{
    const doc = parent.ownerDocument;
    const node = doc.createTextNode(text);
    if (parent != null) {
        parent.appendChild(node);
        parent.appendChild(document.createElement('br'));
    }
    return node;
};
const br = (parent, count = 1)=>{
    let br = null;
    for(let i = 0; i < count; i += 1){
        if (parent != null) {
            br = parent.ownerDocument.createElement('br');
            parent.appendChild(br);
        }
    }
    return br;
};
const para = (parent, text)=>{
    const p = document.createElement('p');
    write(p, text);
    if (parent != null) {
        parent.appendChild(p);
    }
    return p;
};
const isNode = (value, nodeName = null, attributeName, attributeValue)=>{
    if (value != null && !isNaN(value.nodeType) && (nodeName == null || value.nodeName.toLowerCase() == nodeName.toLowerCase())) {
        return attributeName == null || value.getAttribute(attributeName) == attributeValue;
    }
    return false;
};
const isAncestorNode = (ancestor, child)=>{
    let parent = child;
    while(parent != null){
        if (parent === ancestor) {
            return true;
        }
        parent = parent.parentNode;
    }
    return false;
};
const getChildNodes = (node, nodeType = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODETYPE"].ELEMENT)=>{
    nodeType = nodeType || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODETYPE"].ELEMENT;
    const children = [];
    let tmp = node.firstChild;
    while(tmp != null){
        if (tmp.nodeType === nodeType) {
            children.push(tmp);
        }
        tmp = tmp.nextSibling;
    }
    return children;
};
const importNode = (doc, node, allChildren)=>{
    return doc.importNode(node, allChildren);
};
const importNodeImplementation = (doc, node, allChildren)=>{
    switch(node.nodeType){
        case 1 /* element */ :
            {
                const newNode = doc.createElement(node.nodeName);
                if (node.attributes && node.attributes.length > 0) {
                    for(let i = 0; i < node.attributes.length; i += 1){
                        newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i].nodeName));
                    }
                }
                if (allChildren && node.childNodes && node.childNodes.length > 0) {
                    for(let i = 0; i < node.childNodes.length; i += 1){
                        newNode.appendChild(importNodeImplementation(doc, node.childNodes[i], allChildren));
                    }
                }
                return newNode;
                "TURBOPACK unreachable";
            }
        case 3:
        /* text */ case 4:
        /* cdata-section */ case 8 /* comment */ :
            {
                return doc.createTextNode(node.nodeValue || '');
                "TURBOPACK unreachable";
            }
    }
};
const clearSelection = ()=>{
    // @ts-ignore
    const sel = window.getSelection ? window.getSelection() : document.selection;
    if (sel) {
        if (sel.removeAllRanges) {
            sel.removeAllRanges();
        } else if (sel.empty) {
            sel.empty();
        }
    }
};
const createImage = (src)=>{
    let imageNode = null;
    imageNode = document.createElement('img');
    imageNode.setAttribute('src', src);
    imageNode.setAttribute('border', '0');
    return imageNode;
};
const addLinkToHead = (rel, href, doc = null, id = null)=>{
    doc = doc || document;
    // Workaround for Operation Aborted in IE6 if base tag is used in head
    const link = doc.createElement('link');
    link.setAttribute('rel', rel);
    link.setAttribute('href', href);
    link.setAttribute('charset', 'UTF-8');
    link.setAttribute('type', 'text/css');
    if (id) {
        link.setAttribute('id', id);
    }
    const head = doc.getElementsByTagName('head')[0];
    head.appendChild(link);
};
}}),
"[project]/node_modules/@maxgraph/core/lib/util/logger.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2024-present The maxGraph project Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "ConsoleLogger": (()=>ConsoleLogger),
    "NoOpLogger": (()=>NoOpLogger)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Utils.js [app-client] (ecmascript)");
;
class NoOpLogger {
    debug(_message) {}
    enter(_message) {
        return undefined;
    }
    error(_message, ..._optionalParams) {}
    info(_message) {}
    leave(_message, _baseTimestamp) {}
    show() {}
    trace(_message) {}
    warn(_message) {}
}
class ConsoleLogger {
    constructor(){
        this.debugEnabled = false;
        this.infoEnabled = false;
        this.traceEnabled = false;
    }
    /* eslint-disable no-console -- we must use "console" to direct logs to the browser console */ enter(message) {
        if (this.traceEnabled) {
            console.trace(`Entering ${message}`);
            return new Date().getTime();
        }
    }
    leave(message, baseTimestamp) {
        if (this.traceEnabled) {
            const dt = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getElapseMillisecondsMessage"])(baseTimestamp);
            console.trace(`Leaving ${message}${dt}`);
        }
    }
    show() {}
    trace(message) {
        if (this.traceEnabled) {
            console.trace(message);
        }
    }
    debug(message) {
        if (this.debugEnabled) {
            console.debug(message);
        }
    }
    info(message) {
        if (this.infoEnabled) {
            console.info(message);
        }
    }
    warn(message) {
        console.warn(message);
    }
    error(message, ...optionalParams) {
        console.error(message, ...optionalParams);
    }
} /* eslint-enable no-console */ 
}}),
"[project]/node_modules/@maxgraph/core/lib/util/StringUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "getColor": (()=>getColor),
    "getFunctionName": (()=>getFunctionName),
    "getNumber": (()=>getNumber),
    "getStringValue": (()=>getStringValue),
    "htmlEntities": (()=>htmlEntities),
    "ltrim": (()=>ltrim),
    "removeWhitespace": (()=>removeWhitespace),
    "replaceTrailingNewlines": (()=>replaceTrailingNewlines),
    "rtrim": (()=>rtrim),
    "toString": (()=>toString),
    "trim": (()=>trim)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/domUtils.js [app-client] (ecmascript)");
;
;
const ltrim = (str, chars = '\\s')=>str != null ? str.replace(new RegExp(`^[${chars}]+`, 'g'), '') : null;
const rtrim = (str, chars = '\\s')=>str != null ? str.replace(new RegExp(`[${chars}]+$`, 'g'), '') : null;
const trim = (str, chars)=>ltrim(rtrim(str, chars), chars);
const getFunctionName = (f)=>{
    let str = null;
    if (f != null) {
        if (f.name != null) {
            str = f.name;
        } else {
            str = trim(f.toString());
            if (str !== null && /^function\s/.test(str)) {
                str = ltrim(str.substring(9));
                if (str !== null) {
                    const idx2 = str.indexOf('(');
                    if (idx2 > 0) {
                        str = str.substring(0, idx2);
                    }
                }
            }
        }
    }
    return str;
};
const replaceTrailingNewlines = (str, pattern)=>{
    // LATER: Check is this can be done with a regular expression
    let postfix = '';
    while(str.length > 0 && str.charAt(str.length - 1) == '\n'){
        str = str.substring(0, str.length - 1);
        postfix += pattern;
    }
    return str + postfix;
};
const removeWhitespace = (node, before)=>{
    let tmp = before ? node.previousSibling : node.nextSibling;
    while(tmp != null && tmp.nodeType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODETYPE"].TEXT){
        const next = before ? tmp.previousSibling : tmp.nextSibling;
        const text = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTextContent"])(tmp);
        if (trim(text)?.length === 0) {
            tmp.parentNode?.removeChild(tmp);
        }
        tmp = next;
    }
};
const htmlEntities = (s, newline = true)=>{
    s = String(s || '');
    s = s.replace(/&/g, '&amp;'); // 38 26
    s = s.replace(/"/g, '&quot;'); // 34 22
    s = s.replace(/'/g, '&#39;'); // 39 27
    s = s.replace(/</g, '&lt;'); // 60 3C
    s = s.replace(/>/g, '&gt;'); // 62 3E
    if (newline) {
        s = s.replace(/\n/g, '&#xa;');
    }
    return s;
};
const getStringValue = (array, key, defaultValue)=>{
    let value = array != null ? array[key] : null;
    if (value == null) {
        value = defaultValue;
    }
    return value == null ? null : String(value);
};
const getNumber = (array, key, defaultValue)=>{
    let value = array != null ? array[key] : null;
    if (value == null) {
        value = defaultValue || 0;
    }
    return Number(value);
};
const getColor = (array, key, defaultValue)=>{
    let value = array != null ? array[key] : null;
    if (value == null) {
        value = defaultValue;
    } else if (value === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NONE"]) {
        value = null;
    }
    return value;
};
const toString = (obj)=>{
    let output = '';
    for(const i in obj){
        try {
            if (obj[i] == null) {
                output += `${i} = [null]\n`;
            } else if (typeof obj[i] === 'function') {
                output += `${i} => [Function]\n`;
            } else if (typeof obj[i] === 'object') {
                const ctor = getFunctionName(obj[i].constructor);
                output += `${i} => [${ctor}]\n`;
            } else {
                output += `${i} = ${obj[i]}\n`;
            }
        } catch (e) {
            output += `${i}=${e.message}`;
        }
    }
    return output;
};
}}),
"[project]/node_modules/@maxgraph/core/lib/util/ObjectIdentity.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$StringUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/StringUtils.js [app-client] (ecmascript)");
;
;
/**
 * @class
 *
 * Identity for JavaScript objects and functions. This is implemented using
 * a simple incrementing counter which is stored in each object under
 * {@link FIELD_NAME}.
 *
 * The identity for an object does not change during its lifecycle.
 */ class ObjectIdentity {
    /**
     * Returns the ID for the given object or function.
     */ static get(obj) {
        if (obj) {
            if (obj[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IDENTITY_FIELD_NAME"]] === null || obj[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IDENTITY_FIELD_NAME"]] === undefined) {
                if (typeof obj === 'object') {
                    const ctor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$StringUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFunctionName"])(obj.constructor);
                    obj[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IDENTITY_FIELD_NAME"]] = `${ctor}#${ObjectIdentity.counter++}`;
                } else if (typeof obj === 'function') {
                    obj[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IDENTITY_FIELD_NAME"]] = `Function#${ObjectIdentity.counter++}`;
                }
            }
            return obj[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IDENTITY_FIELD_NAME"]];
        }
        return null;
    }
    /**
     * Deletes the ID from the given object or function.
     */ static clear(obj) {
        delete obj[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IDENTITY_FIELD_NAME"]];
    }
}
/**
 * Name of the field to be used to store the object ID. Default is
 * <code>mxObjectId</code>.
 */ ObjectIdentity.FIELD_NAME = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["IDENTITY_FIELD_NAME"];
/**
 * Current counter.
 */ ObjectIdentity.counter = 0;
const __TURBOPACK__default__export__ = ObjectIdentity;
}}),
"[project]/node_modules/@maxgraph/core/lib/util/cloneUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "clone": (()=>clone),
    "shallowCopy": (()=>shallowCopy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$ObjectIdentity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/ObjectIdentity.js [app-client] (ecmascript)");
;
const clone = function _clone(obj, transients = null, shallow = false) {
    shallow = shallow != null ? shallow : false;
    let clone = null;
    if (obj != null && typeof obj.constructor === 'function') {
        clone = new obj.constructor();
        for(const i in obj){
            if (i != __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$ObjectIdentity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].FIELD_NAME && (transients == null || transients.indexOf(i) < 0)) {
                if (!shallow && typeof obj[i] === 'object') {
                    clone[i] = _clone(obj[i]);
                } else {
                    clone[i] = obj[i];
                }
            }
        }
    }
    return clone;
};
const shallowCopy = (source, target)=>{
    for(const key in source){
        // attempt to prevent prototype pollution
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
};
}}),
"[project]/node_modules/@maxgraph/core/lib/util/config.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2024-present The maxGraph project Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "GlobalConfig": (()=>GlobalConfig),
    "StyleDefaultsConfig": (()=>StyleDefaultsConfig),
    "resetStyleDefaultsConfig": (()=>resetStyleDefaultsConfig)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$logger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/logger.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$cloneUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/cloneUtils.js [app-client] (ecmascript)");
;
;
;
const GlobalConfig = {
    /**
     * Configure the logger to use for all log messages.
     *
     * Available implementations provided by maxGraph are:
     * * {@link ConsoleLogger} - Directs logs to the browser console.
     * * {@link NoOpLogger} - Default implementation that does nothing.
     * * {@link MaxLogAsLogger} - Directs logs to {@link MaxLog}.
     *
     * To change the logger, set this property to an instance of the desired logger:
     * ```js
     * // To direct logs to the browser console
     * GlobalConfig.logger = new ConsoleLogger();
     * // To direct logs to MaxLog
     * GlobalConfig.logger = new MaxLogAsLogger();
     * ```
     *
     * @default {@link NoOpLogger}
     */ logger: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$logger$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NoOpLogger"]()
};
const StyleDefaultsConfig = {
    /**
     * Defines the color to be used to draw shadows in shapes and windows.
     * @default {@link SHADOWCOLOR}
     */ shadowColor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHADOWCOLOR"],
    /**
     * Specifies the x-offset of the shadow.
     * @default {@link SHADOW_OFFSET_X}
     */ shadowOffsetX: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHADOW_OFFSET_X"],
    /**
     * Specifies the y-offset of the shadow.
     * @default {@link SHADOW_OFFSET_Y}
     */ shadowOffsetY: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHADOW_OFFSET_Y"],
    /**
     * Defines the opacity for shadow. Possible values are between 1 (opaque) and 0 (transparent).
     * @default {@link SHADOW_OPACITY}
     */ shadowOpacity: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SHADOW_OPACITY"]
};
const defaultStyleDefaultsConfig = {
    ...StyleDefaultsConfig
};
const resetStyleDefaultsConfig = ()=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$cloneUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["shallowCopy"])(defaultStyleDefaultsConfig, StyleDefaultsConfig);
};
}}),
"[project]/node_modules/@maxgraph/core/lib/util/Utils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "copyTextToClipboard": (()=>copyTextToClipboard),
    "getElapseMillisecondsMessage": (()=>getElapseMillisecondsMessage),
    "getValue": (()=>getValue),
    "isNotNullish": (()=>isNotNullish),
    "isNullish": (()=>isNullish),
    "mixInto": (()=>mixInto),
    "utils": (()=>utils)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/Client.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/config.js [app-client] (ecmascript)");
;
;
const utils = {
    /*
     * Specifies the resource key for the title of the error window. If the
     * resource for this key does not exist then the value is used as
     * the title. Default is 'error'.
     */ errorResource: 'error',
    /**
     * Specifies the resource key for the label of the close button. If the
     * resource for this key does not exist then the value is used as
     * the label. Default is 'close'.
     */ closeResource: 'close',
    /**
     * Defines the image used for error dialogs.
     */ errorImage: `${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].imageBasePath}/error.gif`
};
const isNullish = (v)=>v === null || v === undefined;
const isNotNullish = (v)=>!isNullish(v);
const mixInto = (dest)=>(mixin)=>{
        const keys = Reflect.ownKeys(mixin);
        try {
            for (const key of keys){
                Object.defineProperty(dest.prototype, key, {
                    value: mixin[key],
                    writable: true
                });
            }
        } catch (e) {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalConfig"].logger.error('Error while mixing', e);
        }
    };
const getValue = (array, key, defaultValue)=>{
    let value = array != null ? array[key] : null;
    if (value == null) {
        value = defaultValue;
    }
    return value;
};
const copyTextToClipboard = (text)=>{
    // Credit: https://stackoverflow.com/questions/400212/how-do-i-copy-to-the-clipboard-in-javascript
    if (!navigator.clipboard) {
        fallbackCopyTextToClipboard(text);
        return;
    }
    navigator.clipboard.writeText(text).then(function() {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalConfig"].logger.info('Async: Copying to clipboard was successful!');
    }, function(err) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalConfig"].logger.error('Async: Could not copy text: ', err);
    });
};
const fallbackCopyTextToClipboard = (text)=>{
    const textArea = document.createElement('textarea');
    textArea.value = text;
    // Avoid scrolling to bottom
    textArea.style.top = '0';
    textArea.style.left = '0';
    textArea.style.position = 'fixed';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    try {
        const successful = document.execCommand('copy');
        const msg = successful ? 'successful' : 'unsuccessful';
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalConfig"].logger.info(`Fallback: Copying text command was ${msg}`);
    } catch (err) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$config$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["GlobalConfig"].logger.error('Fallback: Oops, unable to copy', err);
    }
    document.body.removeChild(textArea);
};
const getElapseMillisecondsMessage = (baseTimestamp)=>baseTimestamp ? ` (${new Date().getTime() - baseTimestamp} ms)` : '';
}}),
"[project]/node_modules/@maxgraph/core/lib/util/mathUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "arcToCurves": (()=>arcToCurves),
    "contains": (()=>contains),
    "findNearestSegment": (()=>findNearestSegment),
    "getBoundingBox": (()=>getBoundingBox),
    "getDirectedBounds": (()=>getDirectedBounds),
    "getPerimeterPoint": (()=>getPerimeterPoint),
    "getPortConstraints": (()=>getPortConstraints),
    "getRotatedPoint": (()=>getRotatedPoint),
    "intersection": (()=>intersection),
    "intersects": (()=>intersects),
    "intersectsHotspot": (()=>intersectsHotspot),
    "isInteger": (()=>isInteger),
    "isNumeric": (()=>isNumeric),
    "mod": (()=>mod),
    "ptLineDist": (()=>ptLineDist),
    "ptSegDistSq": (()=>ptSegDistSq),
    "rectangleIntersectsSegment": (()=>rectangleIntersectsSegment),
    "relativeCcw": (()=>relativeCcw),
    "reversePortConstraints": (()=>reversePortConstraints),
    "toDegree": (()=>toDegree),
    "toRadians": (()=>toRadians)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/view/geometry/Point.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/view/geometry/Rectangle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Utils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Constants.js [app-client] (ecmascript)");
;
;
;
;
const toRadians = (deg)=>{
    return Math.PI * deg / 180;
};
const toDegree = (rad)=>{
    return rad * 180 / Math.PI;
};
const arcToCurves = (x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)=>{
    x -= x0;
    y -= y0;
    if (r1 === 0 || r2 === 0) {
        return [];
    }
    const fS = sweepFlag;
    const psai = angle;
    r1 = Math.abs(r1);
    r2 = Math.abs(r2);
    const ctx = -x / 2;
    const cty = -y / 2;
    const cpsi = Math.cos(psai * Math.PI / 180);
    const spsi = Math.sin(psai * Math.PI / 180);
    const rxd = cpsi * ctx + spsi * cty;
    const ryd = -1 * spsi * ctx + cpsi * cty;
    const rxdd = rxd * rxd;
    const rydd = ryd * ryd;
    const r1x = r1 * r1;
    const r2y = r2 * r2;
    const lamda = rxdd / r1x + rydd / r2y;
    let sds;
    if (lamda > 1) {
        r1 = Math.sqrt(lamda) * r1;
        r2 = Math.sqrt(lamda) * r2;
        sds = 0;
    } else {
        let seif = 1;
        if (largeArcFlag === fS) {
            seif = -1;
        }
        sds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));
    }
    const txd = sds * r1 * ryd / r2;
    const tyd = -1 * sds * r2 * rxd / r1;
    const tx = cpsi * txd - spsi * tyd + x / 2;
    const ty = spsi * txd + cpsi * tyd + y / 2;
    let rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);
    let s1 = rad >= 0 ? rad : 2 * Math.PI + rad;
    rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);
    let dr = rad >= 0 ? rad : 2 * Math.PI + rad;
    if (!fS && dr > 0) {
        dr -= 2 * Math.PI;
    } else if (fS && dr < 0) {
        dr += 2 * Math.PI;
    }
    const sse = dr * 2 / Math.PI;
    const seg = Math.ceil(sse < 0 ? -1 * sse : sse);
    const segr = dr / seg;
    const t = 8 / 3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);
    const cpsir1 = cpsi * r1;
    const cpsir2 = cpsi * r2;
    const spsir1 = spsi * r1;
    const spsir2 = spsi * r2;
    let mc = Math.cos(s1);
    let ms = Math.sin(s1);
    let x2 = -t * (cpsir1 * ms + spsir2 * mc);
    let y2 = -t * (spsir1 * ms - cpsir2 * mc);
    let x3 = 0;
    let y3 = 0;
    const result = [];
    for(let n = 0; n < seg; ++n){
        s1 += segr;
        mc = Math.cos(s1);
        ms = Math.sin(s1);
        x3 = cpsir1 * mc - spsir2 * ms + tx;
        y3 = spsir1 * mc + cpsir2 * ms + ty;
        const dx = -t * (cpsir1 * ms + spsir2 * mc);
        const dy = -t * (spsir1 * ms - cpsir2 * mc);
        // CurveTo updates x0, y0 so need to restore it
        const index = n * 6;
        result[index] = Number(x2 + x0);
        result[index + 1] = Number(y2 + y0);
        result[index + 2] = Number(x3 - dx + x0);
        result[index + 3] = Number(y3 - dy + y0);
        result[index + 4] = Number(x3 + x0);
        result[index + 5] = Number(y3 + y0);
        x2 = x3 + dx;
        y2 = y3 + dy;
    }
    return result;
};
const getBoundingBox = (rect, rotation, cx = null)=>{
    let result = null;
    if (rect && rotation !== 0) {
        const rad = toRadians(rotation);
        const cos = Math.cos(rad);
        const sin = Math.sin(rad);
        cx = cx != null ? cx : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](rect.x + rect.width / 2, rect.y + rect.height / 2);
        let p1 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](rect.x, rect.y);
        let p2 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](rect.x + rect.width, rect.y);
        let p3 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](p2.x, rect.y + rect.height);
        let p4 = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](rect.x, p3.y);
        p1 = getRotatedPoint(p1, cos, sin, cx);
        p2 = getRotatedPoint(p2, cos, sin, cx);
        p3 = getRotatedPoint(p3, cos, sin, cx);
        p4 = getRotatedPoint(p4, cos, sin, cx);
        result = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](p1.x, p1.y, 0, 0);
        result.add(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](p2.x, p2.y, 0, 0));
        result.add(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](p3.x, p3.y, 0, 0));
        result.add(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](p4.x, p4.y, 0, 0));
    }
    return result;
};
const getRotatedPoint = (pt, cos, sin, c = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]())=>{
    const x = pt.x - c.x;
    const y = pt.y - c.y;
    const x1 = x * cos - y * sin;
    const y1 = y * cos + x * sin;
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](x1 + c.x, y1 + c.y);
};
const getPortConstraints = (terminal, edge, source, defaultValue)=>{
    const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValue"])(terminal.style, 'portConstraint', (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValue"])(edge.style, source ? 'sourcePortConstraint' : 'targetPortConstraint', null));
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNullish"])(value)) {
        return defaultValue;
    }
    const directions = value.toString();
    let returnValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].NONE;
    const constraintRotationEnabled = terminal.style.portConstraintRotation ?? false;
    let rotation = 0;
    if (constraintRotationEnabled) {
        rotation = terminal.style.rotation ?? 0;
    }
    let quad = 0;
    if (rotation > 45) {
        quad = 1;
        if (rotation >= 135) {
            quad = 2;
        }
    } else if (rotation < -45) {
        quad = 3;
        if (rotation <= -135) {
            quad = 2;
        }
    }
    if (directions.indexOf(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].NORTH) >= 0) {
        switch(quad){
            case 0:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].NORTH;
                break;
            case 1:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].EAST;
                break;
            case 2:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].SOUTH;
                break;
            case 3:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].WEST;
                break;
        }
    }
    if (directions.indexOf(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].WEST) >= 0) {
        switch(quad){
            case 0:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].WEST;
                break;
            case 1:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].NORTH;
                break;
            case 2:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].EAST;
                break;
            case 3:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].SOUTH;
                break;
        }
    }
    if (directions.indexOf(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].SOUTH) >= 0) {
        switch(quad){
            case 0:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].SOUTH;
                break;
            case 1:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].WEST;
                break;
            case 2:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].NORTH;
                break;
            case 3:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].EAST;
                break;
        }
    }
    if (directions.indexOf(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].EAST) >= 0) {
        switch(quad){
            case 0:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].EAST;
                break;
            case 1:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].SOUTH;
                break;
            case 2:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].WEST;
                break;
            case 3:
                returnValue |= __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].NORTH;
                break;
        }
    }
    return returnValue;
};
const reversePortConstraints = (constraint)=>{
    let result = 0;
    result = (constraint & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].WEST) << 3;
    result |= (constraint & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].NORTH) << 1;
    result |= (constraint & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].SOUTH) >> 1;
    result |= (constraint & __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION_MASK"].EAST) >> 3;
    return result;
};
const findNearestSegment = (state, x, y)=>{
    let index = -1;
    if (state.absolutePoints.length > 0) {
        let last = state.absolutePoints[0];
        let min = null;
        for(let i = 1; i < state.absolutePoints.length; i += 1){
            const current = state.absolutePoints[i];
            if (!last || !current) continue;
            const dist = ptSegDistSq(last.x, last.y, current.x, current.y, x, y);
            if (min == null || dist < min) {
                min = dist;
                index = i - 1;
            }
            last = current;
        }
    }
    return index;
};
const getDirectedBounds = (rect, m, style, flipH, flipV)=>{
    const d = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValue"])(style, 'direction', __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].EAST);
    flipH = flipH != null ? flipH : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValue"])(style, 'flipH', false);
    flipV = flipV != null ? flipV : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValue"])(style, 'flipV', false);
    m.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));
    m.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));
    m.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));
    m.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));
    if (flipV && (d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].SOUTH || d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].NORTH) || flipH && (d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].EAST || d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].WEST)) {
        const tmp = m.x;
        m.x = m.width;
        m.width = tmp;
    }
    if (flipH && (d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].SOUTH || d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].NORTH) || flipV && (d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].EAST || d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].WEST)) {
        const tmp = m.y;
        m.y = m.height;
        m.height = tmp;
    }
    const m2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].fromRectangle(m);
    if (d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].SOUTH) {
        m2.y = m.x;
        m2.x = m.height;
        m2.width = m.y;
        m2.height = m.width;
    } else if (d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].WEST) {
        m2.y = m.height;
        m2.x = m.width;
        m2.width = m.x;
        m2.height = m.y;
    } else if (d === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIRECTION"].NORTH) {
        m2.y = m.width;
        m2.x = m.y;
        m2.width = m.height;
        m2.height = m.x;
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);
};
const getPerimeterPoint = (pts, center, point)=>{
    let min = null;
    for(let i = 0; i < pts.length - 1; i += 1){
        const pt = intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y, center.x, center.y, point.x, point.y);
        if (pt != null) {
            const dx = point.x - pt.x;
            const dy = point.y - pt.y;
            const ip = {
                p: pt,
                distSq: dy * dy + dx * dx
            };
            if (ip != null && (min == null || min.distSq > ip.distSq)) {
                min = ip;
            }
        }
    }
    return min != null ? min.p : null;
};
const rectangleIntersectsSegment = (bounds, p1, p2)=>{
    const top = bounds.y;
    const left = bounds.x;
    const bottom = top + bounds.height;
    const right = left + bounds.width;
    // Find min and max X for the segment
    let minX = p1.x;
    let maxX = p2.x;
    if (p1.x > p2.x) {
        minX = p2.x;
        maxX = p1.x;
    }
    // Find the intersection of the segment's and rectangle's x-projections
    if (maxX > right) {
        maxX = right;
    }
    if (minX < left) {
        minX = left;
    }
    if (minX > maxX) {
        // If their projections do not intersect return false
        return false;
    }
    // Find corresponding min and max Y for min and max X we found before
    let minY = p1.y;
    let maxY = p2.y;
    const dx = p2.x - p1.x;
    if (Math.abs(dx) > 0.0000001) {
        const a = (p2.y - p1.y) / dx;
        const b = p1.y - a * p1.x;
        minY = a * minX + b;
        maxY = a * maxX + b;
    }
    if (minY > maxY) {
        const tmp = maxY;
        maxY = minY;
        minY = tmp;
    }
    // Find the intersection of the segment's and rectangle's y-projections
    if (maxY > bottom) {
        maxY = bottom;
    }
    if (minY < top) {
        minY = top;
    }
    if (minY > maxY) {
        // If Y-projections do not intersect return false
        return false;
    }
    return true;
};
const contains = (bounds, x, y)=>{
    return bounds.x <= x && bounds.x + bounds.width >= x && bounds.y <= y && bounds.y + bounds.height >= y;
};
const intersects = (a, b)=>{
    let tw = a.width;
    let th = a.height;
    let rw = b.width;
    let rh = b.height;
    if (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0) {
        return false;
    }
    const tx = a.x;
    const ty = a.y;
    const rx = b.x;
    const ry = b.y;
    rw += rx;
    rh += ry;
    tw += tx;
    th += ty;
    return (rw < rx || rw > tx) && (rh < ry || rh > ty) && (tw < tx || tw > rx) && (th < ty || th > ry);
};
const intersectsHotspot = (state, x, y, hotspot, min, max)=>{
    hotspot = hotspot != null ? hotspot : 1;
    min = min != null ? min : 0;
    max = max != null ? max : 0;
    if (hotspot > 0) {
        let cx = state.getCenterX();
        let cy = state.getCenterY();
        let w = state.width;
        let h = state.height;
        const start = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValue"])(state.style, 'startSize') * state.view.scale;
        if (start > 0) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValue"])(state.style, 'horizontal', true)) {
                cy = state.y + start / 2;
                h = start;
            } else {
                cx = state.x + start / 2;
                w = start;
            }
        }
        w = Math.max(min, w * hotspot);
        h = Math.max(min, h * hotspot);
        if (max > 0) {
            w = Math.min(w, max);
            h = Math.min(h, max);
        }
        const rect = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](cx - w / 2, cy - h / 2, w, h);
        const alpha = toRadians((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Utils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValue"])(state.style, 'rotation') || 0);
        if (alpha != 0) {
            const cos = Math.cos(-alpha);
            const sin = Math.sin(-alpha);
            const cx = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](state.getCenterX(), state.getCenterY());
            const pt = getRotatedPoint(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](x, y), cos, sin, cx);
            x = pt.x;
            y = pt.y;
        }
        return contains(rect, x, y);
    }
    return true;
};
const isNumeric = (n)=>{
    return !Number.isNaN(parseFloat(n)) && isFinite(+n) && (typeof n !== 'string' || n.toLowerCase().indexOf('0x') < 0);
};
const isInteger = (n)=>{
    return String(parseInt(n)) === String(n);
};
const mod = (n, m)=>{
    return (n % m + m) % m;
};
const intersection = (x0, y0, x1, y1, x2, y2, x3, y3)=>{
    const denom = (y3 - y2) * (x1 - x0) - (x3 - x2) * (y1 - y0);
    const nume_a = (x3 - x2) * (y0 - y2) - (y3 - y2) * (x0 - x2);
    const nume_b = (x1 - x0) * (y0 - y2) - (y1 - y0) * (x0 - x2);
    const ua = nume_a / denom;
    const ub = nume_b / denom;
    if (ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0) {
        // Get the intersection point
        const x = x0 + ua * (x1 - x0);
        const y = y0 + ua * (y1 - y0);
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](x, y);
    }
    // No intersection
    return null;
};
const ptSegDistSq = (x1, y1, x2, y2, px, py)=>{
    x2 -= x1;
    y2 -= y1;
    px -= x1;
    py -= y1;
    let dotprod = px * x2 + py * y2;
    let projlenSq;
    if (dotprod <= 0.0) {
        projlenSq = 0.0;
    } else {
        px = x2 - px;
        py = y2 - py;
        dotprod = px * x2 + py * y2;
        if (dotprod <= 0.0) {
            projlenSq = 0.0;
        } else {
            projlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
        }
    }
    let lenSq = px * px + py * py - projlenSq;
    if (lenSq < 0) {
        lenSq = 0;
    }
    return lenSq;
};
const ptLineDist = (x1, y1, x2, y2, px, py)=>{
    return Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) / Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));
};
const relativeCcw = (x1, y1, x2, y2, px, py)=>{
    x2 -= x1;
    y2 -= y1;
    px -= x1;
    py -= y1;
    let ccw = px * y2 - py * x2;
    if (ccw == 0.0) {
        ccw = px * x2 + py * y2;
        if (ccw > 0.0) {
            px -= x2;
            py -= y2;
            ccw = px * x2 + py * y2;
            if (ccw < 0.0) {
                ccw = 0.0;
            }
        }
    }
    return ccw < 0.0 ? -1 : ccw > 0.0 ? 1 : 0;
};
}}),
"[project]/node_modules/@maxgraph/core/lib/util/Dictionary.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$ObjectIdentity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/ObjectIdentity.js [app-client] (ecmascript)");
;
/**
 * A wrapper class for an associative array with object keys.
 *
 * Note: This implementation uses {@link ObjectIdentity} to turn object keys into strings.
 *
 */ class Dictionary {
    constructor(){
        /**
         * Stores the (key, value) pairs in this dictionary.
         */ this.map = {};
        this.clear();
    }
    /**
     * Clears the dictionary.
     */ clear() {
        this.map = {};
    }
    /**
     * Returns the value for the given key.
     */ get(key) {
        const id = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$ObjectIdentity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(key);
        return this.map[id] ?? null;
    }
    /**
     * Stores the value under the given key and returns the previous
     * value for that key.
     */ put(key, value) {
        const id = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$ObjectIdentity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(key);
        const previous = this.map[id];
        this.map[id] = value;
        return previous ?? null;
    }
    /**
     * Removes the value for the given key and returns the value that
     * has been removed.
     */ remove(key) {
        const id = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$ObjectIdentity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(key);
        const previous = this.map[id];
        delete this.map[id];
        return previous ?? null;
    }
    /**
     * Returns all keys as an array.
     */ getKeys() {
        const result = [];
        for(const key in this.map){
            result.push(key);
        }
        return result;
    }
    /**
     * Returns all values as an array.
     */ getValues() {
        const result = [];
        for(const key in this.map){
            result.push(this.map[key]);
        }
        return result;
    }
    /**
     * Visits all entries in the dictionary using the given function with the
     * following signature: (key, value)=> where key is a string and
     * value is an object.
     *
     * @param visitor A function that takes the key and value as arguments.
     */ visit(visitor) {
        for(const key in this.map){
            visitor(key, this.map[key]);
        }
    }
}
const __TURBOPACK__default__export__ = Dictionary;
}}),
"[project]/node_modules/@maxgraph/core/lib/util/styleUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "convertPoint": (()=>convertPoint),
    "fit": (()=>fit),
    "getAlignmentAsPoint": (()=>getAlignmentAsPoint),
    "getCurrentStyle": (()=>getCurrentStyle),
    "getDocumentScrollOrigin": (()=>getDocumentScrollOrigin),
    "getDocumentSize": (()=>getDocumentSize),
    "getOffset": (()=>getOffset),
    "getScrollOrigin": (()=>getScrollOrigin),
    "getSizeForString": (()=>getSizeForString),
    "hasScrollbars": (()=>hasScrollbars),
    "matchBinaryMask": (()=>matchBinaryMask),
    "parseCssNumber": (()=>parseCssNumber),
    "removeCursors": (()=>removeCursors),
    "setCellStyleFlags": (()=>setCellStyleFlags),
    "setCellStyles": (()=>setCellStyles),
    "setOpacity": (()=>setOpacity),
    "setPrefixedStyle": (()=>setPrefixedStyle),
    "setStyleFlag": (()=>setStyleFlag),
    "sortCells": (()=>sortCells)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/Client.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/view/geometry/Rectangle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/view/geometry/Point.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Dictionary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Dictionary.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$cell$2f$CellPath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/view/cell/CellPath.js [app-client] (ecmascript)");
;
;
;
;
;
;
const removeCursors = (element)=>{
    if (element.style) {
        element.style.cursor = '';
    }
    const children = element.children;
    if (children) {
        const childCount = children.length;
        for(let i = 0; i < childCount; i += 1){
            removeCursors(children[i]);
        }
    }
};
const getCurrentStyle = (element)=>{
    return !element || element.toString() === '[object ShadowRoot]' ? null : window.getComputedStyle(element, '');
};
const parseCssNumber = (value)=>{
    if (value === 'thin') {
        value = '2';
    } else if (value === 'medium') {
        value = '4';
    } else if (value === 'thick') {
        value = '6';
    }
    let n = parseFloat(value);
    if (Number.isNaN(n)) {
        n = 0;
    }
    return n;
};
const setPrefixedStyle = (style, name, value)=>{
    let prefix = null;
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].IS_SF || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].IS_GC) {
        prefix = 'Webkit';
    } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].IS_MT) {
        prefix = 'Moz';
    }
    style.setProperty(name, value);
    if (prefix !== null && name.length > 0) {
        name = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);
        style.setProperty(name, value);
    }
};
const hasScrollbars = (node)=>{
    const style = getCurrentStyle(node);
    return !!style && (style.overflow === 'scroll' || style.overflow === 'auto');
};
const getDocumentSize = ()=>{
    const b = document.body;
    const d = document.documentElement;
    try {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](0, 0, b.clientWidth ?? d.clientWidth, Math.max(b.clientHeight ?? 0, d.clientHeight));
    } catch (e) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    }
};
const fit = (node)=>{
    const ds = getDocumentSize();
    const left = node.offsetLeft;
    const width = node.offsetWidth;
    const offset = getDocumentScrollOrigin(node.ownerDocument);
    const sl = offset.x;
    const st = offset.y;
    const right = sl + ds.width;
    if (left + width > right) {
        node.style.left = `${Math.max(sl, right - width)}px`;
    }
    const top = node.offsetTop;
    const height = node.offsetHeight;
    const bottom = st + ds.height;
    if (top + height > bottom) {
        node.style.top = `${Math.max(st, bottom - height)}px`;
    }
};
const getOffset = (container, scrollOffset = false)=>{
    let offsetLeft = 0;
    let offsetTop = 0;
    // Ignores document scroll origin for fixed elements
    let fixed = false;
    let node = container;
    const b = document.body;
    const d = document.documentElement;
    while(node != null && node != b && node != d && !fixed){
        const style = getCurrentStyle(node);
        if (style != null) {
            fixed = fixed || style.position == 'fixed';
        }
        node = node.parentNode;
    }
    if (!scrollOffset && !fixed) {
        const offset = getDocumentScrollOrigin(container.ownerDocument);
        offsetLeft += offset.x;
        offsetTop += offset.y;
    }
    const r = container.getBoundingClientRect();
    if (r != null) {
        offsetLeft += r.left;
        offsetTop += r.top;
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](offsetLeft, offsetTop);
};
const getDocumentScrollOrigin = (doc)=>{
    // @ts-ignore 'parentWindow' is an unknown property.
    const wnd = doc.defaultView || doc.parentWindow;
    const x = wnd != null && window.pageXOffset !== undefined ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;
    const y = wnd != null && window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](x, y);
};
const getScrollOrigin = (node = null, includeAncestors = false, includeDocument = true)=>{
    const doc = node != null ? node.ownerDocument : document;
    const b = doc.body;
    const d = doc.documentElement;
    const result = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    let fixed = false;
    while(node != null && node != b && node != d){
        if (!Number.isNaN(node.scrollLeft) && !Number.isNaN(node.scrollTop)) {
            result.x += node.scrollLeft;
            result.y += node.scrollTop;
        }
        const style = getCurrentStyle(node);
        if (style != null) {
            fixed = fixed || style.position == 'fixed';
        }
        node = includeAncestors ? node.parentNode : null;
    }
    if (!fixed && includeDocument) {
        const origin = getDocumentScrollOrigin(doc);
        result.x += origin.x;
        result.y += origin.y;
    }
    return result;
};
const convertPoint = (container, x, y)=>{
    const origin = getScrollOrigin(container, false);
    const offset = getOffset(container);
    offset.x -= origin.x;
    offset.y -= origin.y;
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](x - offset.x, y - offset.y);
};
const setCellStyles = (model, cells, key, value)=>{
    if (cells.length > 0) {
        model.batchUpdate(()=>{
            for(let i = 0; i < cells.length; i += 1){
                const cell = cells[i];
                if (cell) {
                    // Currently, the style object must be cloned, otherwise model.setStyle does not trigger the change event and the cell state in the view is not updated
                    const style = cell.getClonedStyle();
                    style[key] = value;
                    model.setStyle(cell, style);
                }
            }
        });
    }
};
const setCellStyleFlags = (model, cells, key, flag, value)=>{
    if (cells.length > 0) {
        model.batchUpdate(()=>{
            for(let i = 0; i < cells.length; i += 1){
                const cell = cells[i];
                if (cell) {
                    // Currently, the style object must be cloned, otherwise model.setStyle does not trigger the change event and the cell state in the view is not updated
                    const style = setStyleFlag(cell.getClonedStyle(), key, flag, value);
                    model.setStyle(cell, style);
                }
            }
        });
    }
};
const setStyleFlag = (style, key, flag, value)=>{
    const v = style[key];
    if (v === undefined) {
        style[key] = value === undefined || value ? flag : 0;
    } else {
        if (value === undefined) {
            style[key] = v ^ flag;
        } else if (value) {
            style[key] = v | flag;
        } else {
            style[key] = v & ~flag;
        }
    }
    return style;
};
const setOpacity = (node, value)=>{
    node.style.opacity = String(value / 100);
};
const matchBinaryMask = (value, mask)=>{
    return (value & mask) === mask;
};
const getSizeForString = (text, fontSize = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_FONTSIZE"], fontFamily = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DEFAULT_FONTFAMILY"], textWidth = null, fontStyle = null)=>{
    const div = document.createElement('div');
    // Sets the font size and family
    div.style.fontFamily = fontFamily;
    div.style.fontSize = `${Math.round(fontSize)}px`;
    div.style.lineHeight = `${Math.round(fontSize * __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["LINE_HEIGHT"])}px`;
    // Sets the font style
    if (fontStyle !== null) {
        matchBinaryMask(fontStyle, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FONT"].BOLD) && (div.style.fontWeight = 'bold');
        matchBinaryMask(fontStyle, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FONT"].ITALIC) && (div.style.fontWeight = 'italic');
        const txtDecor = [];
        matchBinaryMask(fontStyle, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FONT"].UNDERLINE) && txtDecor.push('underline');
        matchBinaryMask(fontStyle, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["FONT"].STRIKETHROUGH) && txtDecor.push('line-through');
        txtDecor.length > 0 && (div.style.textDecoration = txtDecor.join(' '));
    }
    // Disables block layout and outside wrapping and hides the div
    div.style.position = 'absolute';
    div.style.visibility = 'hidden';
    div.style.display = 'inline-block';
    if (textWidth !== null) {
        div.style.width = `${textWidth}px`;
        div.style.whiteSpace = 'normal';
    } else {
        div.style.whiteSpace = 'nowrap';
    }
    // Adds the text and inserts into DOM for updating of size
    div.innerHTML = text;
    document.body.appendChild(div);
    // Gets the size and removes from DOM
    const size = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Rectangle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](0, 0, div.offsetWidth, div.offsetHeight);
    document.body.removeChild(div);
    return size;
};
const sortCells = (cells, ascending = true)=>{
    const lookup = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Dictionary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    cells.sort((o1, o2)=>{
        let p1 = lookup.get(o1);
        if (p1 == null) {
            p1 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$cell$2f$CellPath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create(o1).split(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$cell$2f$CellPath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].PATH_SEPARATOR);
            lookup.put(o1, p1);
        }
        let p2 = lookup.get(o2);
        if (p2 == null) {
            p2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$cell$2f$CellPath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].create(o2).split(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$cell$2f$CellPath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].PATH_SEPARATOR);
            lookup.put(o2, p2);
        }
        const comp = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$cell$2f$CellPath$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].compare(p1, p2);
        return comp == 0 ? 0 : comp > 0 == ascending ? 1 : -1;
    });
    return cells;
};
const getAlignmentAsPoint = (align, valign)=>{
    let dx = -0.5;
    let dy = -0.5;
    // Horizontal alignment
    if (align === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGN"].LEFT) {
        dx = 0;
    } else if (align === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGN"].RIGHT) {
        dx = -1;
    }
    // Vertical alignment
    if (valign === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGN"].TOP) {
        dy = 0;
    } else if (valign === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ALIGN"].BOTTOM) {
        dy = -1;
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](dx, dy);
};
}}),
"[project]/node_modules/@maxgraph/core/lib/util/arrayUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "equalEntries": (()=>equalEntries),
    "equalPoints": (()=>equalPoints),
    "remove": (()=>remove),
    "removeDuplicates": (()=>removeDuplicates)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Dictionary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Dictionary.js [app-client] (ecmascript)");
;
const remove = (obj, array)=>{
    let result = null;
    if (typeof array === 'object') {
        let index = array.indexOf(obj);
        while(index >= 0){
            array.splice(index, 1);
            result = obj;
            index = array.indexOf(obj);
        }
    }
    for(const key in array){
        if (array[key] == obj) {
            delete array[key];
            result = obj;
        }
    }
    return result;
};
const equalPoints = (a, b)=>{
    if (!a && b || a && !b || a && b && a.length != b.length) {
        return false;
    }
    if (a && b) {
        for(let i = 0; i < a.length; i += 1){
            const p = a[i];
            if (!p || p && !p.equals(b[i])) return false;
        }
    }
    return true;
};
const equalEntries = (a, b)=>{
    // Counts keys in b to check if all values have been compared
    let count = 0;
    if (!a && b || a && !b || a && b && a.length != b.length) {
        return false;
    }
    if (a && b) {
        for(const key in b){
            count++;
        }
        for(const key in a){
            count--;
            if ((!Number.isNaN(a[key]) || !Number.isNaN(b[key])) && a[key] !== b[key]) {
                return false;
            }
        }
    }
    return count === 0;
};
const removeDuplicates = (arr)=>{
    const dict = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Dictionary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    const result = [];
    for(let i = 0; i < arr.length; i += 1){
        if (!dict.get(arr[i])) {
            result.push(arr[i]);
            dict.put(arr[i], true);
        }
    }
    return result;
};
}}),
"[project]/node_modules/@maxgraph/core/lib/util/MaxXmlRequest.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2020, JGraph Ltd
Copyright (c) 2006-2020, draw.io AG

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__),
    "get": (()=>get),
    "getAll": (()=>getAll),
    "load": (()=>load),
    "post": (()=>post),
    "submit": (()=>submit)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/domUtils.js [app-client] (ecmascript)");
;
/**
 * XML HTTP request wrapper. See also: {@link mxUtils.get}, {@link mxUtils.post} and
 * {@link mxUtils.load}. This class provides a cross-browser abstraction for Ajax
 * requests.
 *
 * ### Encoding:
 *
 * For encoding parameter values, the built-in encodeURIComponent JavaScript
 * method must be used. For automatic encoding of post data in {@link Editor} the
 * {@link Editor.escapePostData} switch can be set to true (default). The encoding
 * will be carried out using the conte type of the page. That is, the page
 * containting the editor should contain a meta tag in the header, eg.
 * <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
 *
 * @example
 * ```JavaScript
 * var onload = function(req)
 * {
 *   mxUtils.alert(req.getDocumentElement());
 * }
 *
 * var onerror = function(req)
 * {
 *   mxUtils.alert('Error');
 * }
 * new MaxXmlRequest(url, 'key=value').send(onload, onerror);
 * ```
 *
 * Sends an asynchronous POST request to the specified URL.
 *
 * @example
 * ```JavaScript
 * var req = new MaxXmlRequest(url, 'key=value', 'POST', false);
 * req.send();
 * mxUtils.alert(req.getDocumentElement());
 * ```
 *
 * Sends a synchronous POST request to the specified URL.
 *
 * @example
 * ```JavaScript
 * var encoder = new Codec();
 * var result = encoder.encode(graph.getDataModel());
 * var xml = encodeURIComponent(mxUtils.getXml(result));
 * new MaxXmlRequest(url, 'xml='+xml).send();
 * ```
 *
 * Sends an encoded graph model to the specified URL using xml as the
 * parameter name. The parameter can then be retrieved in C# as follows:
 *
 * ```javascript
 * string xml = HttpUtility.UrlDecode(context.Request.Params["xml"]);
 * ```
 *
 * Or in Java as follows:
 *
 * ```javascript
 * String xml = URLDecoder.decode(request.getParameter("xml"), "UTF-8").replace("
", "&#xa;");
 * ```
 *
 * Note that the linefeeds should only be replaced if the XML is
 * processed in Java, for example when creating an image.
 */ class MaxXmlRequest {
    constructor(url, params = null, method = 'POST', async = true, username = null, password = null){
        /**
         * Boolean indicating if the request is binary. This option is ignored in IE.
         * In all other browsers the requested mime type is set to
         * text/plain; charset=x-user-defined. Default is false.
         *
         * @default false
         */ this.binary = false;
        /**
         * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is false.
         *
         * @default false
         */ this.withCredentials = false;
        /**
         * Holds the inner, browser-specific request object.
         */ this.request = null;
        /**
         * Specifies if request values should be decoded as URIs before setting the
         * textarea value in {@link simulate}. Defaults to false for backwards compatibility,
         * to avoid another decode on the server this should be set to true.
         */ this.decodeSimulateValues = false;
        this.url = url;
        this.params = params;
        this.method = method || 'POST';
        this.async = async;
        this.username = username;
        this.password = password;
    }
    /**
     * Returns {@link binary}.
     */ isBinary() {
        return this.binary;
    }
    /**
     * Sets {@link binary}.
     *
     * @param value
     */ setBinary(value) {
        this.binary = value;
    }
    /**
     * Returns the response as a string.
     */ getText() {
        return this.request.responseText;
    }
    /**
     * Returns true if the response is ready.
     */ isReady() {
        return this.request.readyState === 4;
    }
    /**
     * Returns the document element of the response XML document.
     */ getDocumentElement() {
        const doc = this.getXml();
        if (doc != null) {
            return doc.documentElement;
        }
        return null;
    }
    /**
     * Returns the response as an XML document. Use {@link getDocumentElement} to get
     * the document element of the XML document.
     */ getXml() {
        let xml = this.request.responseXML;
        // Handles missing response headers in IE, the first condition handles
        // the case where responseXML is there, but using its nodes leads to
        // type errors in the CellCodec when putting the nodes into a new
        // document. This happens in IE9 standards mode and with XML user
        // objects only, as they are used directly as values in cells.
        if (xml == null || xml.documentElement == null) {
            xml = new DOMParser().parseFromString(this.request.responseText, 'text/xml');
        }
        return xml;
    }
    /**
     * Returns the status as a number, eg. 404 for "Not found" or 200 for "OK".
     * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.
     */ getStatus() {
        return this.request != null ? this.request.status : null;
    }
    /**
     * Creates and returns the inner {@link request} object.
     */ create() {
        const req = new XMLHttpRequest();
        // TODO: Check for overrideMimeType required here?
        if (this.isBinary() && req.overrideMimeType) {
            req.overrideMimeType('text/plain; charset=x-user-defined');
        }
        return req;
    }
    /**
     * Send the <request> to the target URL using the specified functions to
     * process the response asychronously.
     *
     * Note: Due to technical limitations, onerror is currently ignored.
     *
     * @param onload Function to be invoked if a successful response was received.
     * @param onerror Function to be called on any error. Unused in this implementation, intended for overriden function.
     * @param timeout Optional timeout in ms before calling ontimeout.
     * @param ontimeout Optional function to execute on timeout.
     */ send(onload = null, onerror = null, timeout = null, ontimeout = null) {
        this.request = this.create();
        if (this.request != null) {
            if (onload != null) {
                this.request.onreadystatechange = ()=>{
                    if (this.isReady()) {
                        onload(this);
                        this.request.onreadystatechange = null;
                    }
                };
            }
            this.request.open(this.method, this.url, this.async, this.username, this.password);
            this.setRequestHeaders(this.request, this.params);
            if (window.XMLHttpRequest && this.withCredentials) {
                this.request.withCredentials = 'true';
            }
            if (window.XMLHttpRequest && timeout != null && ontimeout != null) {
                this.request.timeout = timeout;
                this.request.ontimeout = ontimeout;
            }
            this.request.send(this.params);
        }
    }
    /**
     * Sets the headers for the given request and parameters. This sets the
     * content-type to application/x-www-form-urlencoded if any params exist.
     *
     * @example
     * ```JavaScript
     * request.setRequestHeaders = function(request, params)
     * {
     *   if (params != null)
     *   {
     *     request.setRequestHeader('Content-Type',
     *             'multipart/form-data');
     *     request.setRequestHeader('Content-Length',
     *             params.length);
     *   }
     * };
     * ```
     *
     * Use the code above before calling {@link send} if you require a
     * multipart/form-data request.
     *
     * @param request
     * @param params
     */ setRequestHeaders(request, params) {
        if (params != null) {
            request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        }
    }
    /**
     * Creates and posts a request to the given target URL using a dynamically
     * created form inside the given document.
     *
     * @param doc Document that contains the form element.
     * @param target Target to send the form result to.
     */ simulate(doc, target = null) {
        doc = doc || document;
        let old = null;
        if (doc === document) {
            old = window.onbeforeunload;
            window.onbeforeunload = null;
        }
        const form = doc.createElement('form');
        form.setAttribute('method', this.method);
        form.setAttribute('action', this.url);
        if (target != null) {
            form.setAttribute('target', target);
        }
        form.style.display = 'none';
        form.style.visibility = 'hidden';
        const params = this.params;
        const pars = params.indexOf('&') > 0 ? params.split('&') : params.split(' ');
        // Adds the parameters as textareas to the form
        for(let i = 0; i < pars.length; i += 1){
            const pos = pars[i].indexOf('=');
            if (pos > 0) {
                const name = pars[i].substring(0, pos);
                let value = pars[i].substring(pos + 1);
                if (this.decodeSimulateValues) {
                    value = decodeURIComponent(value);
                }
                const textarea = doc.createElement('textarea');
                textarea.setAttribute('wrap', 'off');
                textarea.setAttribute('name', name);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["write"])(textarea, value);
                form.appendChild(textarea);
            }
        }
        doc.body.appendChild(form);
        form.submit();
        if (form.parentNode != null) {
            form.parentNode.removeChild(form);
        }
        if (old != null) {
            window.onbeforeunload = old;
        }
    }
}
const load = (url)=>{
    const req = new MaxXmlRequest(url, null, 'GET', false);
    req.send();
    return req;
};
const get = (url, onload = null, onerror = null, binary = false, timeout = null, ontimeout = null, headers = null)=>{
    const req = new MaxXmlRequest(url, null, 'GET');
    const { setRequestHeaders } = req;
    if (headers) {
        req.setRequestHeaders = (request, params)=>{
            setRequestHeaders.apply(this, [
                request,
                params
            ]);
            for(const key in headers){
                request.setRequestHeader(key, headers[key]);
            }
        };
    }
    if (binary != null) {
        req.setBinary(binary);
    }
    req.send(onload, onerror, timeout, ontimeout);
    return req;
};
const getAll = (urls, onload, onerror)=>{
    let remain = urls.length;
    const result = [];
    let errors = 0;
    const err = ()=>{
        if (errors == 0 && onerror != null) {
            onerror();
        }
        errors++;
    };
    for(let i = 0; i < urls.length; i += 1){
        ((url, index)=>{
            get(url, (req)=>{
                const status = req.getStatus();
                if (status < 200 || status > 299) {
                    err();
                } else {
                    result[index] = req;
                    remain--;
                    if (remain == 0) {
                        onload(result);
                    }
                }
            }, err);
        })(urls[i], i);
    }
    if (remain == 0) {
        onload(result);
    }
};
const post = (url, params = null, onload, onerror = null)=>{
    return new MaxXmlRequest(url, params).send(onload, onerror);
};
const submit = (url, params, doc, target)=>{
    return new MaxXmlRequest(url, params).simulate(doc, target);
};
const __TURBOPACK__default__export__ = MaxXmlRequest;
}}),
"[project]/node_modules/@maxgraph/core/lib/util/xmlUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "createXmlDocument": (()=>createXmlDocument),
    "findNode": (()=>findNode),
    "getPrettyXml": (()=>getPrettyXml),
    "getViewXml": (()=>getViewXml),
    "getXml": (()=>getXml),
    "parseXml": (()=>parseXml)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/view/geometry/Point.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$cell$2f$TemporaryCellStates$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/view/cell/TemporaryCellStates.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$serialization$2f$Codec$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/serialization/Codec.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$StringUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/StringUtils.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/domUtils.js [app-client] (ecmascript)");
;
;
;
;
;
;
const createXmlDocument = ()=>{
    return document.implementation.createDocument('', '', null);
};
const parseXml = (xmlString)=>{
    return new DOMParser().parseFromString(xmlString, 'text/xml');
};
const getViewXml = (graph, scale = 1, cells = null, x0 = 0, y0 = 0)=>{
    if (cells == null) {
        const model = graph.getDataModel();
        cells = [
            model.getRoot()
        ];
    }
    const view = graph.getView();
    let result = null;
    // Disables events on the view
    const eventsEnabled = view.isEventsEnabled();
    view.setEventsEnabled(false);
    // Workaround for label bounds not taken into account for image export.
    // Creates a temporary draw pane which is used for rendering the text.
    // Text rendering is required for finding the bounds of the labels.
    const { drawPane } = view;
    const { overlayPane } = view;
    if (graph.dialect === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["DIALECT"].SVG) {
        view.drawPane = document.createElementNS(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NS_SVG"], 'g');
        view.canvas.appendChild(view.drawPane);
        // Redirects cell overlays into temporary container
        view.overlayPane = document.createElementNS(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NS_SVG"], 'g');
        view.canvas.appendChild(view.overlayPane);
    } else {
        view.drawPane = view.drawPane.cloneNode(false);
        view.canvas.appendChild(view.drawPane);
        // Redirects cell overlays into temporary container
        view.overlayPane = view.overlayPane.cloneNode(false);
        view.canvas.appendChild(view.overlayPane);
    }
    // Resets the translation
    const translate = view.getTranslate();
    view.translate = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$geometry$2f$Point$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](x0, y0);
    // Creates the temporary cell states in the view
    const temp = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$view$2f$cell$2f$TemporaryCellStates$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"](graph.getView(), scale, cells);
    try {
        const enc = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$serialization$2f$Codec$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
        result = enc.encode(graph.getView());
    } finally{
        temp.destroy();
        view.translate = translate;
        view.canvas.removeChild(view.drawPane);
        view.canvas.removeChild(view.overlayPane);
        view.drawPane = drawPane;
        view.overlayPane = overlayPane;
        view.setEventsEnabled(eventsEnabled);
    }
    return result;
};
const getXml = (node, linefeed = '&#xa;')=>{
    const xmlSerializer = new XMLSerializer();
    let xml = xmlSerializer.serializeToString(node);
    // Replaces linefeed with HTML Entities.
    xml = xml.replace(/\n/g, linefeed);
    return xml;
};
const getPrettyXml = (node, tab = '  ', indent = '', newline = '\n', ns = null)=>{
    const result = [];
    if (node != null) {
        if (node.namespaceURI != null && node.namespaceURI !== ns) {
            ns = node.namespaceURI;
            if (node.getAttribute('xmlns') == null) {
                node.setAttribute('xmlns', node.namespaceURI);
            }
        }
        if (node.nodeType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODETYPE"].DOCUMENT) {
            result.push(getPrettyXml(node.documentElement, tab, indent, newline, ns));
        } else if (node.nodeType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODETYPE"].DOCUMENT_FRAGMENT) {
            let tmp = node.firstChild;
            if (tmp != null) {
                while(tmp != null){
                    result.push(getPrettyXml(tmp, tab, indent, newline, ns));
                    tmp = tmp.nextSibling;
                }
            }
        } else if (node.nodeType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODETYPE"].COMMENT) {
            const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTextContent"])(node);
            if (value.length > 0) {
                result.push(`${indent}<!--${value}-->${newline}`);
            }
        } else if (node.nodeType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODETYPE"].TEXT) {
            const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$StringUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["trim"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTextContent"])(node));
            if (value && value.length > 0) {
                result.push(indent + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$StringUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["htmlEntities"])(value, false) + newline);
            }
        } else if (node.nodeType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODETYPE"].CDATA) {
            const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$domUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getTextContent"])(node);
            if (value.length > 0) {
                result.push(`${indent}<![CDATA[${value}]]${newline}`);
            }
        } else {
            result.push(`${indent}<${node.nodeName}`);
            // Creates the string with the node attributes
            // and converts all HTML entities in the values
            const attrs = node.attributes;
            if (attrs != null) {
                for(let i = 0; i < attrs.length; i += 1){
                    const val = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$StringUtils$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["htmlEntities"])(attrs[i].value);
                    result.push(` ${attrs[i].nodeName}="${val}"`);
                }
            }
            // Recursively creates the XML string for each child
            // node and appends it here with an indentation
            let tmp = node.firstChild;
            if (tmp != null) {
                result.push(`>${newline}`);
                while(tmp != null){
                    result.push(getPrettyXml(tmp, tab, indent + tab, newline, ns));
                    tmp = tmp.nextSibling;
                }
                result.push(`${indent}</${node.nodeName}>${newline}`);
            } else {
                result.push(` />${newline}`);
            }
        }
    }
    return result.join('');
};
const findNode = (node, attr, value)=>{
    if (node.nodeType === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODETYPE"].ELEMENT) {
        const tmp = node.getAttribute(attr);
        if (tmp && tmp === value) {
            return node;
        }
    }
    node = node.firstChild;
    while(node){
        const result = findNode(node, attr, value);
        if (result) {
            return result;
        }
        node = node.nextSibling;
    }
    return null;
};
}}),
"[project]/node_modules/@maxgraph/core/lib/util/UrlConverter.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ /**
 * Converts relative and absolute URLs to absolute URLs with protocol and domain.
 */ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
class UrlConverter {
    constructor(){
        /**
         * Specifies if the converter is enabled. Default is true.
         */ this.enabled = true;
        /**
         * Specifies the base URL to be used as a prefix for relative URLs.
         */ this.baseUrl = null;
        /**
         * Specifies the base domain to be used as a prefix for absolute URLs.
         */ this.baseDomain = null;
    // Empty constructor
    }
    /**
     * Private helper function to update the base URL.
     */ updateBaseUrl() {
        this.baseDomain = `${location.protocol}//${location.host}`;
        this.baseUrl = this.baseDomain + location.pathname;
        const tmp = this.baseUrl.lastIndexOf('/');
        // Strips filename etc
        if (tmp > 0) {
            this.baseUrl = this.baseUrl.substring(0, tmp + 1);
        }
    }
    /**
     * Returns <enabled>.
     */ isEnabled() {
        return this.enabled;
    }
    /**
     * Sets <enabled>.
     */ setEnabled(value) {
        this.enabled = value;
    }
    /**
     * Returns <baseUrl>.
     */ getBaseUrl() {
        return this.baseUrl;
    }
    /**
     * Sets <baseUrl>.
     */ setBaseUrl(value) {
        this.baseUrl = value;
    }
    /**
     * Returns <baseDomain>.
     */ getBaseDomain() {
        return this.baseDomain;
    }
    /**
     * Sets <baseDomain>.
     */ setBaseDomain(value) {
        this.baseDomain = value;
    }
    /**
     * Returns true if the given URL is relative.
     */ isRelativeUrl(url) {
        return url && url.substring(0, 2) !== '//' && url.substring(0, 7) !== 'http://' && url.substring(0, 8) !== 'https://' && url.substring(0, 10) !== 'data:image' && url.substring(0, 7) !== 'file://';
    }
    /**
     * Converts the given URL to an absolute URL with protol and domain.
     * Relative URLs are first converted to absolute URLs.
     */ convert(url) {
        if (this.isEnabled() && this.isRelativeUrl(url)) {
            if (!this.getBaseUrl()) {
                this.updateBaseUrl();
            }
            if (url.charAt(0) === '/') {
                url = this.getBaseDomain() + url;
            } else {
                url = this.getBaseUrl() + url;
            }
        }
        return url;
    }
}
const __TURBOPACK__default__export__ = UrlConverter;
}}),
"[project]/node_modules/@maxgraph/core/lib/util/Translations.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2016, JGraph Ltd
Copyright (c) 2006-2016, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/ __turbopack_esm__({
    "default": (()=>__TURBOPACK__default__export__)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/Client.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$MaxXmlRequest$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/MaxXmlRequest.js [app-client] (ecmascript)");
;
;
;
/**
 * Implements internationalization. You can provide any number of
 * resource files on the server using the following format for the
 * filename: name[-en].properties. The en stands for any lowercase
 * 2-character language shortcut (eg. de for german, fr for french).
 *
 * If the optional language extension is omitted, then the file is used as a
 * default resource which is loaded in all cases. If a properties file for a
 * specific language exists, then it is used to override the settings in the
 * default resource. All entries in the file are of the form key=value. The
 * values may then be accessed in code via {@link get}. Lines without
 * equal signs in the properties files are ignored.
 *
 * Resource files may either be added programmatically using
 * {@link add} or via a resource tag in the UI section of the
 * editor configuration file, eg:
 *
 * ```javascript
 * <Editor>
 *   <ui>
 *     <resource basename="examples/resources/mxWorkflow"/>
 * ```
 *
 * The above element will load examples/resources/mxWorkflow.properties as well
 * as the language specific file for the current language, if it exists.
 *
 * Values may contain placeholders of the form {1}...{n} where each placeholder
 * is replaced with the value of the corresponding array element in the params
 * argument passed to {@link get}. The placeholder {1} maps to the first
 * element in the array (at index 0).
 *
 * See {@link Client.language} for more information on specifying the default
 * language or disabling all loading of resources.
 *
 * Lines that start with a # sign will be ignored.
 *
 * ## Special characters
 *
 * To use unicode characters, use the standard notation (eg. \u8fd1) or %u as a
 * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,
 * use % as a prefix, eg. %F6 will display a "o umlaut" (&ouml;).
 *
 * See {@link resourcesEncoded} to disable this. If you disable this, make sure that
 * your files are UTF-8 encoded.
 *
 * ## Asynchronous loading
 *
 * TODO the following is taken from mxGraph and is probably no longer accurate
 *
 * By default, the core adds two resource files synchronously at load time.
 * To load these files asynchronously, set {@link LoadResources} to false
 * before loading Client and use {@link loadResources} instead.
 */ class Translations {
}
/*
 * Object that maps from keys to values.
 */ Translations.resources = {};
/**
 * Specifies the extension used for language files.
 * @default '.txt'
 */ Translations.extension = '.txt';
/**
 * Specifies whether values in resource files are encoded with \u or
 * percentage. Default is false.
 */ Translations.resourcesEncoded = false;
/**
 * Specifies if the default file for a given basename should be loaded.
 * Default is true.
 */ Translations.loadDefaultBundle = true;
/**
 * Specifies if the specific language file file for a given basename should
 * be loaded. Default is true.
 */ Translations.loadSpecialBundle = true;
/**
 * Hook for subclassers to disable support for a given language. This
 * implementation returns true if lan is in <Client.languages>.
 *
 * @param lan The current language.
 */ Translations.isLanguageSupported = (lan)=>{
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].languages != null) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].languages.indexOf(lan) >= 0;
    }
    return true;
};
/**
 * Hook for subclassers to return the URL for the special bundle. This
 * implementation returns basename + <extension> or null if
 * <loadDefaultBundle> is false.
 *
 * @param basename The basename for which the file should be loaded.
 * @param lan The current language.
 */ Translations.getDefaultBundle = (basename, lan)=>{
    if (Translations.loadDefaultBundle || !Translations.isLanguageSupported(lan)) {
        return basename + Translations.extension;
    }
    return null;
};
/**
 * Hook for subclassers to return the URL for the special bundle. This
 * implementation returns `basename + '_' + lan + <extension>` or `null` if
 * {@link Translations.loadSpecialBundle} is `false` or `lan` equals {@link Client.defaultLanguage}.
 *
 * If {@link Translations#languages} is not null and {@link Client.language} contains
 * a dash, then this method checks if {@link Translations.isLanguageSupported} returns `true`
 * for the full language (including the dash). If that returns false the
 * first part of the language (up to the dash) will be tried as an extension.
 *
 * If {@link Translations#language} is null then the first part of the language is
 * used to maintain backwards compatibility.
 *
 * @param basename The basename for which the file should be loaded.
 * @param lan The language for which the file should be loaded.
 */ Translations.getSpecialBundle = (basename, lan)=>{
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].languages == null || !Translations.isLanguageSupported(lan)) {
        const dash = lan.indexOf('-');
        if (dash > 0) {
            lan = lan.substring(0, dash);
        }
    }
    if (Translations.loadSpecialBundle && Translations.isLanguageSupported(lan) && lan != __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].defaultLanguage) {
        return `${basename}_${lan}${Translations.extension}`;
    }
    return null;
};
/**
 * Adds the default and current language properties file for the specified
 * basename. Existing keys are overridden as new files are added. If no
 * callback is used then the request is synchronous.
 *
 * Example:
 *
 * At application startup, additional resources may be
 * added using the following code:
 *
 * ```javascript
 * Translations.add('resources/editor');
 * ```
 *
 * @param basename The basename for which the file should be loaded.
 * @param lan The language for which the file should be loaded.
 * @param callback Optional callback for asynchronous loading.
 */ Translations.add = (basename, lan = null, callback = null)=>{
    lan = lan != null ? lan : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].language != null ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].language.toLowerCase() : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NONE"];
    if (lan !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NONE"]) {
        const defaultBundle = Translations.getDefaultBundle(basename, lan);
        const specialBundle = Translations.getSpecialBundle(basename, lan);
        const loadSpecialBundle = ()=>{
            if (specialBundle != null) {
                if (callback) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$MaxXmlRequest$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["get"])(specialBundle, (req)=>{
                        Translations.parse(req.getText());
                        callback();
                    }, ()=>{
                        callback();
                    });
                } else {
                    try {
                        const req = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$MaxXmlRequest$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["load"])(specialBundle);
                        if (req.isReady()) {
                            Translations.parse(req.getText());
                        }
                    } catch (e) {
                    // ignore
                    }
                }
            } else if (callback != null) {
                callback();
            }
        };
        if (defaultBundle != null) {
            if (callback) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$MaxXmlRequest$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["get"])(defaultBundle, (req)=>{
                    Translations.parse(req.getText());
                    loadSpecialBundle();
                }, ()=>{
                    loadSpecialBundle();
                });
            } else {
                try {
                    const req = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$MaxXmlRequest$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["load"])(defaultBundle);
                    if (req.isReady()) {
                        Translations.parse(req.getText());
                    }
                    loadSpecialBundle();
                } catch (e) {
                // ignore
                }
            }
        } else {
            // Overlays the language specific file (_lan-extension)
            loadSpecialBundle();
        }
    }
};
/**
 * Parses the key, value pairs in the specified
 * text and stores them as local resources.
 */ Translations.parse = (text)=>{
    if (text != null) {
        const lines = text.split('\n');
        for(let i = 0; i < lines.length; i += 1){
            if (lines[i].charAt(0) !== '#') {
                const index = lines[i].indexOf('=');
                if (index > 0) {
                    const key = lines[i].substring(0, index);
                    let idx = lines[i].length;
                    if (lines[i].charCodeAt(idx - 1) === 13) {
                        idx--;
                    }
                    let value = lines[i].substring(index + 1, idx);
                    if (Translations.resourcesEncoded) {
                        value = value.replace(/\\(?=u[a-fA-F\d]{4})/g, '%');
                        Translations.resources[key] = unescape(value);
                    } else {
                        Translations.resources[key] = value;
                    }
                }
            }
        }
    }
};
/**
 * Returns the value for the specified resource key.
 *
 * Example:
 * To read the value for 'welcomeMessage', use the following:
 * ```javascript
 * let result = Translations.get('welcomeMessage') || '';
 * ```
 *
 * This would require an entry of the following form in
 * one of the English language resource files:
 * ```javascript
 * welcomeMessage=Welcome to mxGraph!
 * ```
 *
 * The part behind the || is the string value to be used if the given
 * resource is not available.
 *
 * @param key String that represents the key of the resource to be returned.
 * @param params Array of the values for the placeholders of the form {1}...{n}
 * to be replaced with in the resulting string.
 * @param defaultValue Optional string that specifies the default return value.
 */ Translations.get = (key, params = null, defaultValue = null)=>{
    let value = Translations.resources[key];
    // Applies the default value if no resource was found
    if (value == null) {
        value = defaultValue;
    }
    // Replaces the placeholders with the values in the array
    if (value != null && params != null) {
        value = Translations.replacePlaceholders(value, params);
    }
    return value;
};
/**
 * Replaces the given placeholders with the given parameters.
 *
 * @param value String that contains the placeholders.
 * @param params Array of the values for the placeholders of the form {1}...{n}
 * to be replaced with in the resulting string.
 */ Translations.replacePlaceholders = (value, params)=>{
    const result = [];
    let index = null;
    for(let i = 0; i < value.length; i += 1){
        const c = value.charAt(i);
        if (c === '{') {
            index = '';
        } else if (index != null && c === '}') {
            index = parseInt(index) - 1;
            if (index >= 0 && index < params.length) {
                result.push(params[index]);
            }
            index = null;
        } else if (index != null) {
            index += c;
        } else {
            result.push(c);
        }
    }
    return result.join('');
};
/**
 * Loads all required resources asynchronously. Use this to load the graph and editor resources.
 *
 * @param callback Callback function for asynchronous loading.
 */ Translations.loadResources = (callback)=>{
    Translations.add(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].basePath}/resources/editor`, null, ()=>{
        Translations.add(`${__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$Client$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].basePath}/resources/graph`, null, callback);
    });
};
const __TURBOPACK__default__export__ = Translations;
}}),
"[project]/node_modules/@maxgraph/core/lib/util/cellArrayUtils.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "cloneCell": (()=>cloneCell),
    "cloneCells": (()=>cloneCells),
    "filterCells": (()=>filterCells),
    "getOpposites": (()=>getOpposites),
    "getParents": (()=>getParents),
    "getTopmostCells": (()=>getTopmostCells)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Dictionary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/Dictionary.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$ObjectIdentity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/@maxgraph/core/lib/util/ObjectIdentity.js [app-client] (ecmascript)");
;
;
const filterCells = (filter)=>(cells)=>{
        const result = [];
        for(let i = 0; i < cells.length; i += 1){
            if (filter(cells[i])) {
                result.push(cells[i]);
            }
        }
        return result;
    };
const getOpposites = (edges, terminal, includeSources = true, includeTargets = true)=>{
    return edges.reduce((terminals, edge)=>{
        const source = edge.getTerminal(true);
        const target = edge.getTerminal(false);
        // Checks if the terminal is the source of the edge and if the target should be stored in the result
        if (source === terminal && target != null && target !== terminal && includeTargets) {
            terminals.push(target);
        } else if (target === terminal && source != null && source !== terminal && includeSources) {
            terminals.push(source);
        }
        return terminals;
    }, []);
};
const getTopmostCells = (cells)=>{
    const dict = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Dictionary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    const tmp = [];
    for(let i = 0; i < cells.length; i += 1){
        dict.put(cells[i], true);
    }
    for(let i = 0; i < cells.length; i += 1){
        const cell = cells[i];
        let topmost = true;
        let parent = cell.getParent();
        while(parent != null){
            if (dict.get(parent)) {
                topmost = false;
                break;
            }
            parent = parent.getParent();
        }
        if (topmost) {
            tmp.push(cell);
        }
    }
    return tmp;
};
const getParents = (cells)=>{
    const parents = [];
    const dict = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$Dictionary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"]();
    for (const cell of cells){
        const parent = cell.getParent();
        if (parent != null && !dict.get(parent)) {
            dict.put(parent, true);
            parents.push(parent);
        }
    }
    return parents;
};
const cloneCell = (cell = null, includeChildren = true)=>{
    if (!cell) {
        return null;
    }
    return cloneCells([
        cell
    ], includeChildren)[0];
};
const cloneCells = (cells, includeChildren = true, mapping = {})=>{
    const clones = [];
    for (const cell of cells){
        clones.push(cloneCellImpl(cell, mapping, includeChildren));
    }
    for(let i = 0; i < clones.length; i += 1){
        if (clones[i] != null) {
            restoreClone(clones[i], cells[i], mapping);
        }
    }
    return clones;
};
/**
 * Inner helper method for cloning cells recursively.
 *
 * @private
 */ const cloneCellImpl = (cell, mapping = {}, includeChildren = false)=>{
    const identity = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$ObjectIdentity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(cell);
    let clone = mapping ? mapping[identity] : null;
    if (clone == null) {
        clone = cell.clone();
        mapping[identity] = clone;
        if (includeChildren) {
            const childCount = cell.getChildCount();
            for(let i = 0; i < childCount; i += 1){
                const cloneChild = cloneCellImpl(cell.getChildAt(i), mapping, true);
                clone.insert(cloneChild);
            }
        }
    }
    return clone;
};
/**
 * Inner helper method for restoring the connections in a network of cloned cells.
 *
 * @private
 */ const restoreClone = (clone, cell, mapping)=>{
    const source = cell.getTerminal(true);
    if (source != null) {
        const tmp = mapping[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$ObjectIdentity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(source)];
        if (tmp != null) {
            tmp.insertEdge(clone, true);
        }
    }
    const target = cell.getTerminal(false);
    if (target != null) {
        const tmp = mapping[__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$maxgraph$2f$core$2f$lib$2f$util$2f$ObjectIdentity$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].get(target)];
        if (tmp != null) {
            tmp.insertEdge(clone, false);
        }
    }
    const childCount = clone.getChildCount();
    for(let i = 0; i < childCount; i += 1){
        restoreClone(clone.getChildAt(i), cell.getChildAt(i), mapping);
    }
};
}}),
}]);

//# sourceMappingURL=node_modules_%40maxgraph_core_lib_util_fbe9a3._.js.map